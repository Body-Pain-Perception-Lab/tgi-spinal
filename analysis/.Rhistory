View(test)
# combine responder logic with main data-frame
test$responder <- ifelse(test$responder == TRUE, 1, 0)
test <- test[, c(1,3)]
df_res <- merge(df_res, test, by = 'ID')
# count the number of false responses
nNONRESP <- sum(test$responder == FALSE)
# print
print(paste0('Non responders: ', nNONRESP, '/', length(test$ID)))
rm(list=ls())
install.packages('TMB', type = 'source')
install.packages("TMB", type = "source")
knitr::opts_chunk$set(echo = TRUE)
## Loading libraries
# check for pacman package and install if not found
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson
)
# paths
datPath <- '/Users/au706616/Documents/Experiments/SPINALTGI/exp2/Raw/'
anaPath <- '/Users/au706616/Documents/Experiments/SPINALTGI/exp2/Analysis/'
# Extract all .csv files and compile
filenames <- dir(datPath, recursive = TRUE, full.names = FALSE, pattern = '.csv')
# empty dataframes for data
## with new data trials file will have changed to include temperature coding!
df_trials <- read.csv(text='procedure,trial_type,arm,condition,dermatome,order,cold_probe,trial_n,coolTemp,warmTempID,manipulation')
df_VAS <- read.csv(text='VASinit,VASburn,VASwarm,VAScold,trial_n,ID,manipulation')
df_RT <- read.csv(text='RTinit,RTburn,RTwarm,RTcold,trial_n,ID,manipulation')
## Data compiling
# trial files
setwd(datPath)
for (file in filenames){
# trial files
if (isTRUE(substr(basename(file), 24, 24)=="t")){
tmp <- read.csv(file)
tmp$ID <- substr(basename(file), 4, 6)
tmp$manipulation <- substr(basename(file), 17, 19)
df_trials <- rbind(df_trials, tmp)
}
# VAS response files
if (isTRUE(substr(basename(file), 24, 29)=="rating")){
tmp <- read.csv(file, header = FALSE)
colnames(tmp) <- c('VASinit','VASburn','VASwarm','VAScold','trial_n')
tmp$ID <- substr(basename(file), 4, 6)
tmp$manipulation <- substr(basename(file), 17, 19)
df_VAS <- rbind(df_VAS, tmp)
}
# VAS RT files
if (isTRUE(substr(basename(file), 24, 29)=="respti")){
tmp <- read.csv(file, header = FALSE)
colnames(tmp) <- c('RTinit','RTburn','RTwarm','RTcold','trial_n')
tmp$ID <- substr(basename(file), 4, 6)
tmp$manipulation <- substr(basename(file), 17, 19)
df_RT <- rbind(df_RT, tmp)
}
}
# merge all files
df_res <- merge(df_trials, df_VAS, by = c('ID','trial_n','manipulation'))
df_res <- merge(df_res, df_RT, by = c('ID','trial_n','manipulation'))
# remove participants 047 and 048
# one had ongoing pain, the other missed 6 trials
df_res <- df_res[df_res$ID != '047' ,]
df_res <- df_res[df_res$ID != '048' ,]
# transform the ID of participants to remove 0
df_res$ID <- as.numeric(df_res$ID)
# recode conditions
df_res <- df_res %>%
mutate(condition = dplyr::recode(condition, '1' = 'within', '2' = 'across'),
cold_probe = dplyr::recode(cold_probe, 'C6' = 'rostral', 'T1' = 'caudal',
'dist' = 'distal', 'prox' = 'proximal'))
# change levels
df_res$cold_probe <- factor(df_res$cold_probe,
levels = c("caudal", "rostral", "distal", "proximal"))
# incorporate demographics
# the warm and cold TGI and CNT temperatures did not code properly on the trial .csv
# have saved these in the demo .csv as well, so will add these in
demoFile <- 'STGI_participant-demographics.csv'
fileName = paste(datPath, demoFile, sep = '')
df_demo <- read.csv(fileName)
# Calculate median burning rating for all participants
# TGI trials only
# Then flag how many are not sig > 0
df_med <- aggregate(VASburn~ID*manipulation*cold_probe*trial_type, median, data = df_res)
tgi <-  df_med %>%
filter(manipulation == 'TGI')
cnt <-  df_med %>%
filter(manipulation == 'CNT')
# identify test results where pvalue is < .05
tgi$ID <- as.factor(tgi$ID)
i = 0
test = data.frame(matrix(nrow = 27, ncol = 3))
colnames(test) <- c('ID','pval','responder')
for (id in levels(tgi$ID)){
i = i+1
tmp1 <- tgi[tgi$ID == id ,]
test$ID[i] <- id
test$pval[i] <- (t.test(tmp1$VASburn, mu = 0, alternative = 'greater'))$p.value
test$responder[i] <- isTRUE(test$pval[i] < .05)
}
View(tgi)
count(tgi,iS)
count(tgi,ID)
i = 0
test = data.frame(matrix(nrow = 35, ncol = 3))
colnames(test) <- c('ID','pval','responder')
for (id in levels(tgi$ID)){
i = i+1
tmp1 <- tgi[tgi$ID == id ,]
test$ID[i] <- id
test$pval[i] <- (t.test(tmp1$VASburn, mu = 0, alternative = 'greater'))$p.value
test$responder[i] <- isTRUE(test$pval[i] < .05)
}
# combine responder logic with main data-frame
test$responder <- ifelse(test$responder == TRUE, 1, 0)
test <- test[, c(1,3)]
df_res <- merge(df_res, test, by = 'ID')
# count the number of false responses
nNONRESP <- sum(test$responder == FALSE)
# print
print(paste0('Non responders: ', nNONRESP, '/', length(test$ID)))
# Reorganise data-frame
# pivot longer the VAS response by each quality of sensation
# do this for both RT and VAS
df_long <- df_res %>%
pivot_longer(cols = c(VASinit, VASburn, VASwarm, VAScold),
names_to = 'quality',
values_to = 'VAS')
df_long2 <- df_res %>%
pivot_longer(cols = c(RTinit, RTburn, RTwarm, RTcold),
names_to = 'quality',
values_to = 'RT')
# remove the VAS & RT from quality column
df_long$quality <- substr(df_long$quality, 4, 7)
df_long2$quality <- substr(df_long2$quality, 3, 6)
# remove columns from both then merge
df_long <- df_long[, c(1:12,17:19)]
df_long2 <- df_long2[, c(1:12,17:19)]
df_long <- merge(df_long, df_long2)
# then remove NaNs
df_long <- df_long %>% filter(!is.na(VAS))
# remove the initial trials - not important for now
init_burn <- filter(df_long, quality == 'init')
all_vas <- filter(df_long, quality != 'init')
# plot distribution of data
ggplot(df_long) +
geom_density(aes(VAS, colour = manipulation)) +
facet_wrap(~quality, scales = "free_y") +
theme_bw()
# summary statistics
# calculate means
vas_meds <- aggregate(VAS ~ quality*manipulation*condition*cold_probe*ID,
median, data = all_vas)
vas_h1 <- aggregate(VAS ~ quality*manipulation*condition*ID, mean, data = vas_meds)
# change name of manipulation
vas_h1$manipulation <- factor(vas_h1$manipulation,
labels = c('Non-TGI', 'TGI'))
# summary means for h1
h1_sum <- summarySEwithin(data = vas_h1, measurevar = 'VAS',
withinvars = c('manipulation', 'quality', 'condition'))
# plot the summary statistics
# first colours
blue <- brewer.pal(8, "Blues")
grey <- brewer.pal(8, "Greys")
purp <- brewer.pal(8, "Purples")
oran <- brewer.pal(8, "Oranges")
gren <- brewer.pal(8, "Greens")
# order conditions
h1_sum$condition <- factor(h1_sum$condition, levels = c('within', 'across'))
h1_sum$quality <- factor(h1_sum$quality, levels = c('cold', 'warm', 'burn'))
# plot
ggplot(h1_sum, aes(colour = quality, group = manipulation, alpha = manipulation)) +
geom_point(aes(condition, VAS), size = 2, position = position_dodge(-.3)) +
geom_errorbar(aes(condition, ymin = VAS-ci, ymax = VAS+ci), width = .1, size = .7,
position = position_dodge(-.3)) +
geom_line(aes(condition, VAS), size = .7, position = position_dodge(-.3)) +
facet_wrap(~quality) +
scale_colour_manual(values = c(blue[5], oran[5], purp[5])) +
scale_alpha_discrete(range = c(0.6, 1)) +
ylim(0,50) +
theme_bw()
# plot
ggplot(h1_sum, aes(colour = quality, group = manipulation, alpha = manipulation)) +
geom_point(aes(condition, VAS), size = 2, position = position_dodge(-.3)) +
geom_errorbar(aes(condition, ymin = VAS-ci, ymax = VAS+ci), width = .1, size = .7,
position = position_dodge(-.3)) +
geom_line(aes(condition, VAS), size = .7, position = position_dodge(-.3)) +
facet_wrap(~quality) +
scale_colour_manual(values = c(blue[5], oran[5], purp[5])) +
scale_alpha_discrete(range = c(0.6, 1)) +
ylim(0,70) +
theme_bw()
# then pivot wider and calculate difference
vas_h1_diff <- vas_h1 %>%
pivot_wider(names_from = condition, values_from = VAS) %>%
mutate(difference = within - across)
# recode quality
vas_h1_diff$quality <- factor(vas_h1_diff$quality,
levels = c('cold', 'warm', 'burn'))
# summary statistics
h1_diff_sum <- summarySEwithin(data = vas_h1_diff, measurevar = 'difference',
withinvars = c('manipulation', 'quality'))
# now plot the difference
ggplot(data = vas_h1_diff, aes(colour = quality)) +
geom_hline(yintercept = 0, colour = 'grey50') +
geom_point(aes(manipulation, difference, group = ID), position = position_dodge(.2),
alpha = .5) +
geom_point(data = h1_diff_sum, aes(manipulation, difference), colour = 'grey15',
fill = 'grey15',
shape = 21, size = 3) +
geom_errorbar(data = h1_diff_sum, aes(manipulation, ymin = difference-ci,
ymax = difference+ci),
width = .1, size = .7, colour = 'grey15') +
facet_wrap(~quality) +
scale_colour_manual(values = c(blue[5], oran[5], purp[5])) +
labs(title = 'Hypothesis 1: Segmental Distance',
y = 'Within - Across VAS Ratings', x = NULL) +
theme_classic() +
theme(legend.position = 'none') -> h1_diff_plot
h1_diff_plot
ggsave('h1_difference.png', h1_diff_plot, path = anaPath, device = NULL,
width = 7, height = 4.5, dpi = 1000)
# Change name of manipulation
vas_meds$manipulation <- factor(vas_meds$manipulation, labels = c('Non-TGI', 'TGI'))
h2_sum <- aggregate(VAS~quality*manipulation*cold_probe, median, data = vas_meds)
# organise data for plotting
vas_meds$cold_probe <- factor(vas_meds$cold_probe, levels =
c('proximal', 'distal', 'rostral', 'caudal'))
h2_sum$cold_probe <- factor(h2_sum$cold_probe, levels =
c('proximal', 'distal', 'rostral', 'caudal'))
# recoding cold probe location so can jitter
vas_meds$cold_code <- factor(vas_meds$cold_probe, labels =
c(1,2,3,4))
h2_sum$cold_code <- factor(h2_sum$cold_probe, labels =
c(1,2,3,4))
# creating jitter
vas_meds$xj <- jitter(as.numeric(vas_meds$cold_code), amount = .05)
nudge1 = -.1
nudge2 = .1
# plot all data
# COLD
ggplot(data = vas_meds %>%
filter(quality == 'cold'),
mapping = aes(x = xj, y = VAS, colour = manipulation, fill = manipulation)) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'cold', cold_probe == 'proximal', manipulation == 'Non-TGI'),
position = position_nudge(x = nudge1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'cold', cold_probe == 'proximal', manipulation == 'TGI'),
position = position_nudge(x = nudge2), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'cold', cold_probe == 'distal', manipulation == 'Non-TGI'),
position = position_nudge(x = nudge1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'cold', cold_probe == 'distal', manipulation == 'TGI'),
position = position_nudge(x = nudge2), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'cold', cold_probe == 'rostral', manipulation == 'Non-TGI'),
position = position_nudge(x = nudge1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'cold', cold_probe == 'rostral', manipulation == 'TGI'),
position = position_nudge(x = nudge2), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'cold', cold_probe == 'caudal', manipulation == 'Non-TGI'),
position = position_nudge(x = nudge1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'cold', cold_probe == 'caudal', manipulation == 'TGI'),
position = position_nudge(x = nudge2), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_line(data = h2_sum %>%
filter(quality == 'cold', manipulation == 'Non-TGI'),
aes(as.numeric(cold_code), VAS),
position = position_nudge(nudge1)) +
geom_line(data = h2_sum %>%
filter(quality == 'cold', manipulation == 'TGI'),
aes(as.numeric(cold_code), VAS),
position = position_nudge(nudge2)) +
scale_colour_manual(values = c(blue[5], blue[7])) +
scale_fill_manual(values = c(blue[2], blue[4])) +
scale_x_continuous(breaks = c(1,2,3,4), labels = c('proximal','distal','rostral','caudal')) +
labs(title = 'Cold ratings', x = NULL,
y = 'VAS Rating (0-100)') +
ylim(-0.5,100) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
title = element_text(size = 12)) -> h2_cold_plot
# WARM
ggplot(data = vas_meds %>%
filter(quality == 'warm'),
mapping = aes(x = xj, y = VAS, colour = manipulation, fill = manipulation)) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'warm', cold_probe == 'proximal', manipulation == 'Non-TGI'),
position = position_nudge(x = nudge1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'warm', cold_probe == 'proximal', manipulation == 'TGI'),
position = position_nudge(x = nudge2), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'warm', cold_probe == 'distal', manipulation == 'Non-TGI'),
position = position_nudge(x = nudge1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'warm', cold_probe == 'distal', manipulation == 'TGI'),
position = position_nudge(x = nudge2), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'warm', cold_probe == 'rostral', manipulation == 'Non-TGI'),
position = position_nudge(x = nudge1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'warm', cold_probe == 'rostral', manipulation == 'TGI'),
position = position_nudge(x = nudge2), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'warm', cold_probe == 'caudal', manipulation == 'Non-TGI'),
position = position_nudge(x = nudge1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'warm', cold_probe == 'caudal', manipulation == 'TGI'),
position = position_nudge(x = nudge2), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_line(data = h2_sum %>%
filter(quality == 'warm', manipulation == 'Non-TGI'),
aes(as.numeric(cold_code), VAS),
position = position_nudge(nudge1)) +
geom_line(data = h2_sum %>%
filter(quality == 'warm', manipulation == 'TGI'),
aes(as.numeric(cold_code), VAS),
position = position_nudge(nudge2)) +
scale_colour_manual(values = c(oran[5], oran[7])) +
scale_fill_manual(values = c(oran[2], oran[4])) +
scale_x_continuous(breaks = c(1,2,3,4), labels = c('proximal','distal','rostral','caudal')) +
labs(title = 'Warm ratings', x = NULL,
y = 'VAS Rating (0-100)') +
ylim(-0.5,100) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
title = element_text(size = 12)) -> h2_warm_plot
# BURN
ggplot(data = vas_meds %>%
filter(quality == 'burn'),
mapping = aes(x = xj, y = VAS, colour = manipulation, fill = manipulation)) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'burn', cold_probe == 'proximal', manipulation == 'Non-TGI'),
position = position_nudge(x = nudge1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'burn', cold_probe == 'proximal', manipulation == 'TGI'),
position = position_nudge(x = nudge2), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'burn', cold_probe == 'distal', manipulation == 'Non-TGI'),
position = position_nudge(x = nudge1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'burn', cold_probe == 'distal', manipulation == 'TGI'),
position = position_nudge(x = nudge2), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'burn', cold_probe == 'rostral', manipulation == 'Non-TGI'),
position = position_nudge(x = nudge1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'burn', cold_probe == 'rostral', manipulation == 'TGI'),
position = position_nudge(x = nudge2), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'burn', cold_probe == 'caudal', manipulation == 'Non-TGI'),
position = position_nudge(x = nudge1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == 'burn', cold_probe == 'caudal', manipulation == 'TGI'),
position = position_nudge(x = nudge2), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_line(data = h2_sum %>%
filter(quality == 'burn', manipulation == 'Non-TGI'),
aes(as.numeric(cold_code), VAS),
position = position_nudge(nudge1)) +
geom_line(data = h2_sum %>%
filter(quality == 'burn', manipulation == 'TGI'),
aes(as.numeric(cold_code), VAS),
position = position_nudge(nudge2)) +
scale_colour_manual(values = c(purp[5], purp[7])) +
scale_fill_manual(values = c(purp[2], purp[4])) +
scale_x_continuous(breaks = c(1,2,3,4), labels = c('proximal','distal','rostral','caudal')) +
labs(title = 'Burn ratings', x = NULL,
y = 'VAS Rating (0-100)') +
ylim(-0.5,100) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 11),
axis.title = element_text(size = 12),
title = element_text(size = 12))  -> h2_burn_plot
# arrange entire plot
h2_plot <- ggarrange(h2_cold_plot, h2_warm_plot, h2_burn_plot,
nrow = 2, ncol = 2)
h2_plot
ggsave('h2_alldat_plot.png', h2_plot, device = NULL, path = anaPath,
width = 10, height = 7, dpi = 600)
# recode cold_location and condition to reduce levels in regression
vas_meds$cold_cond[vas_meds$cold_probe == 'distal'] <- 'dist_rost'
vas_meds$cold_cond[vas_meds$cold_probe == 'rostral'] <- 'dist_rost'
vas_meds$cold_cond[vas_meds$cold_probe == 'proximal'] <- 'prox_caud'
vas_meds$cold_cond[vas_meds$cold_probe == 'caudal'] <- 'prox_caud'
# then pivot wider and calculate difference
vas_h2_diff <- vas_meds %>%
select(-c(cold_code, xj, cold_probe)) %>%
pivot_wider(id_cols = c(ID, quality, manipulation, condition),
names_from = cold_cond, values_from = VAS) %>%
mutate(difference = prox_caud - dist_rost)
# recode quality
vas_h2_diff$quality <- factor(vas_h2_diff$quality,
levels = c('cold', 'warm', 'burn'))
# summary statistics
h2_diff_sum <- summarySEwithin(data = vas_h2_diff, measurevar = 'difference',
withinvars = c('manipulation', 'quality', 'condition'))
# plot the differences - within
ggplot(data = vas_h2_diff %>%
filter(condition == 'within'),
aes(manipulation, difference, colour = quality)) +
geom_hline(yintercept = 0) +
geom_point(aes(group = ID), position = position_dodge(.2), alpha = .5) +
geom_point(data = h2_diff_sum %>%
filter(condition == 'within'),
aes(manipulation, difference), colour = 'grey15',
fill = 'grey15',
shape = 21, size = 3) +
geom_errorbar(data = h2_diff_sum %>%
filter(condition == 'within'),
aes(manipulation, ymin = difference-ci, ymax = difference+ci),
width = .1, size = .7, colour = 'grey15') +
scale_colour_manual(values = c(blue[5], oran[5], purp[5])) +
labs(title = 'Within: Proximal vs. Distal',
y = 'Proximal - Distal VAS Ratings', x = NULL) +
facet_wrap(~quality) +
theme_classic() +
theme(legend.position = 'none') -> h2_diff_within
# plot the differences - across
ggplot(data = vas_h2_diff %>%
filter(condition == 'across'),
aes(manipulation, difference, colour = quality)) +
geom_hline(yintercept = 0) +
geom_point(aes(group = ID), position = position_dodge(.2), alpha = .5) +
geom_point(data = h2_diff_sum %>%
filter(condition == 'across'),
aes(manipulation, difference), colour = 'grey15',
fill = 'grey15',
shape = 21, size = 3) +
geom_errorbar(data = h2_diff_sum %>%
filter(condition == 'across'),
aes(manipulation, ymin = difference-ci, ymax = difference+ci),
width = .1, size = .7, colour = 'grey15') +
scale_colour_manual(values = c(blue[5], oran[5], purp[5])) +
labs(title = 'Across: Rostral vs. Caudal',
y = 'Caudal - Rostral VAS Ratings', x = NULL) +
facet_wrap(~quality) +
theme_classic() +
theme(legend.position = 'none') -> h2_diff_across
# arrange entire plot
h2diff_plot <- ggarrange(h2_diff_within, h2_diff_across,
nrow = 2, ncol = 1)
h2diff_plot
ggsave('h2_diff_plot.png', h2diff_plot, device = NULL, path = anaPath,
width = 6, height = 9, dpi = 600)
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(DHARMa, gghalves, ggpol, ggpubr, gridExtra, lme4, lmerTest,
tidyverse, RColorBrewer, rcompanion, Rmisc, wesanderson)
Dpath <- '/Users/au706616/Documents/Experiments/PHS-SKULDNET/'
Apath <- '/Users/au706616/Documents/Experiments/PHS-SKULDNET/analyses/h1'
filename <- "allsub_tsl2_208.csv"
tsl2 <- read.csv(file.path(Dpath,filename))
id40 <- filter(tsl2, exp_id == '40')
View(id40)
