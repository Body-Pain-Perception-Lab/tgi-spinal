tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = 'threshold') %>%
rename(tsl1_cold = cold,
tsl1_warm = warm) %>%
select(-c(task, baseline))
View(tsl1_av_wide)
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = 'threshold') %>%
rename(tsl1_cold = cold,
tsl1_warm = warm) %>%
select(-c(task, baseline, instruction))
rename(tsl2_cold_detect_32 = cold_detect_32,
tsl2_cold_detect_38 = cold_detect_38,
tsl2_cold_detect_44 = cold_detect_44,
tsl2_warm_detect_32 = warm_detect_32,
tsl2_cold_pain_32 = cold_pain_32,
tsl2_cold_pain_38 = cold_pain_38,
tsl2_cold_pain_44 = cold_pain_44) %>%
select(-c(task, baseline, instruction))
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = c('quality','instruction','baseline'), values_from = 'threshold') %>%
rename(tsl2_cold_detect_32 = cold_detect_32,
tsl2_cold_detect_38 = cold_detect_38,
tsl2_cold_detect_44 = cold_detect_44,
tsl2_warm_detect_32 = warm_detect_32,
tsl2_cold_pain_32 = cold_pain_32,
tsl2_cold_pain_38 = cold_pain_38,
tsl2_cold_pain_44 = cold_pain_44) %>%
select(-c(task, baseline, instruction))
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = c('quality','instruction','baseline'), values_from = 'threshold') %>%
rename(tsl2_cold_detect_32 = cold_detect_32,
tsl2_cold_detect_38 = cold_detect_38,
tsl2_cold_detect_44 = cold_detect_44,
tsl2_warm_detect_32 = warm_detect_32,
tsl2_cold_pain_32 = cold_pain_32,
tsl2_cold_pain_38 = cold_pain_38,
tsl2_cold_pain_44 = cold_pain_44) %>%
select(-c(task, instruction))
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = c('quality','instruction','baseline'), values_from = 'threshold') %>%
rename(tsl2_cold_detect_32 = cold_detect_32,
tsl2_cold_detect_38 = cold_detect_38,
tsl2_cold_detect_44 = cold_detect_44,
tsl2_warm_detect_32 = warm_detect_32,
tsl2_cold_pain_32 = cold_pain_32,
tsl2_cold_pain_38 = cold_pain_38,
tsl2_cold_pain_44 = cold_pain_44) %>%
select(-c(task))
qst_wide <- qst %>%
pivot_wider(names_from = c('quality','instruction'), values_from = 'threshold') %>%
rename(qst_cold_detect = cold_detect,
qst_warm_detect = warm_detect,
qst_cold_pain = cold_pain,
qst_warm_pain = warm_pain) %>%
select(-c(task, baseline))
View(tsl2_av_wide)
# merge all
fa_dat <- merge(qst_wide, tsl1_av_wide)
fa_dat <- merge(fa_dat, tsl2_av_wide)
View(fa_dat)
# Correlation
cor(fa_dat)
# Correlation
# remove participants with NAs
fa_dat <- filter(fa_dat, is.na(tsl2_cold_pain_44))
cor(fa_dat)
# merge all
fa_dat <- merge(qst_wide, tsl1_av_wide)
fa_dat <- merge(fa_dat, tsl2_av_wide)
# Correlation
# remove participants with NAs
fa_dat <- filter(fa_dat, !is.na(tsl2_cold_pain_44))
cor(fa_dat)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
## Loading libraries
# check for pacman package and install if not found
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson
)
# paths
datPath <- '/Users/au706616/Documents/Experiments/SPINALTGI/Raw/'
anaPath <- '/Users/au706616/Documents/Experiments/SPINALTGI/Analysis/'
# Extract all .csv files and compile
filenames <- dir(datPath, recursive = TRUE, full.names = FALSE, pattern = '.csv')
# empty dataframes for data
## with new data trials file will have changed to include temperature coding!
df_trials <- read.csv(text='procedure,trial_type,arm,condition,dermatome,order,cold_probe,trial_n,coolTemp,warmTempID,manipulation')
df_VAS <- read.csv(text='VASinit,VASburn,VASwarm,VAScold,trial_n,ID,manipulation')
df_RT <- read.csv(text='RTinit,RTburn,RTwarm,RTcold,trial_n,ID,manipulation')
## Data compiling
# trial files
setwd(datPath)
for (file in filenames){
# trial files
if (isTRUE(substr(basename(file), 24, 24)=="t")){
tmp <- read.csv(file)
tmp$ID <- substr(basename(file), 4, 6)
tmp$manipulation <- substr(basename(file), 17, 19)
df_trials <- rbind(df_trials, tmp)
}
# VAS response files
if (isTRUE(substr(basename(file), 24, 29)=="rating")){
tmp <- read.csv(file, header = FALSE)
colnames(tmp) <- c('VASinit','VASburn','VASwarm','VAScold','trial_n')
tmp$ID <- substr(basename(file), 4, 6)
tmp$manipulation <- substr(basename(file), 17, 19)
df_VAS <- rbind(df_VAS, tmp)
}
# VAS RT files
if (isTRUE(substr(basename(file), 24, 29)=="respti")){
tmp <- read.csv(file, header = FALSE)
colnames(tmp) <- c('RTinit','RTburn','RTwarm','RTcold','trial_n')
tmp$ID <- substr(basename(file), 4, 6)
tmp$manipulation <- substr(basename(file), 17, 19)
df_RT <- rbind(df_RT, tmp)
}
}
# merge all files
df_res <- merge(df_trials, df_VAS, by = c('ID','trial_n','manipulation'))
df_res <- merge(df_res, df_RT, by = c('ID','trial_n','manipulation'))
# remove participant 019, stopped testing halfway due to broken thermal probe
df_res <- df_res[df_res$ID != '019' ,]
# transform the ID of participants to remove 0
df_res$ID <- as.numeric(df_res$ID)
# recode conditions
df_res <- df_res %>%
mutate(condition = dplyr::recode(condition, '1' = 'within', '2' = 'across'),
cold_probe = dplyr::recode(cold_probe, 'C6' = 'rostral', 'T1' = 'caudal',
'dist' = 'distal', 'prox' = 'proximal'))
# change levels
df_res$cold_probe <- factor(df_res$cold_probe,
levels = c("caudal", "rostral", "distal", "proximal"))
# incorporate demographics
# the warm and cold TGI and CNT temperatures did not code properly on the trial .csv
# have saved these in the demo .csv as well, so will add these in
demoFile <- 'STGI_participant-demographics.csv'
fileName = paste(datPath, demoFile, sep = '')
df_demo <- read.csv(fileName)
# merge
test <- merge(df_res, df_demo)
# save new data-frame
fileName = paste(anaPath, 'STGI_compiled-data.csv', sep = '')
write.csv(df_res, fileName, row.names = FALSE)
# check we have 40 participants with 96 trials
id_check <- count(df_res, 'ID')
id_check
# Calculate median burning rating for all participants
# TGI trials only
# Then flag how many are not sig > 0
df_med <- aggregate(VASburn~ID*manipulation*cold_probe*trial_type, median, data = df_res)
tgi <-  df_med %>%
filter(manipulation == 'TGI')
cnt <-  df_med %>%
filter(manipulation == 'CNT')
# identify test results where pvalue is < .05
tgi$ID <- as.factor(tgi$ID)
i = 0
test = data.frame(matrix(nrow = 40, ncol = 3))
colnames(test) <- c('ID','pval','responder')
for (id in levels(tgi$ID)){
i = i+1
tmp1 <- tgi[tgi$ID == id ,]
test$ID[i] <- id
test$pval[i] <- (t.test(tmp1$VASburn, mu = 0, alternative = 'greater'))$p.value
test$responder[i] <- isTRUE(test$pval[i] < .05)
}
# combine responder logic with main data-frame
test$responder <- ifelse(test$responder == TRUE, 1, 0)
test <- test[, c(1,3)]
df_res <- merge(df_res, test, by = 'ID')
# count the number of false responses
nNONRESP <- sum(test$responder == FALSE)
# print
print(paste0('Non responders: ', nNONRESP, '/', length(test$ID)))
# Reorganise data-frame
# pivot longer the VAS response by each quality of sensation
# do this for both RT and VAS
df_long <- df_res %>%
pivot_longer(cols = c(VASinit, VASburn, VASwarm, VAScold),
names_to = 'quality',
values_to = 'VAS')
df_long2 <- df_res %>%
pivot_longer(cols = c(RTinit, RTburn, RTwarm, RTcold),
names_to = 'quality',
values_to = 'RT')
# remove the VAS & RT from quality column
df_long$quality <- substr(df_long$quality, 4, 7)
df_long2$quality <- substr(df_long2$quality, 3, 6)
# remove columns from both then merge
df_long <- df_long[, c(1:12,17:19)]
df_long2 <- df_long2[, c(1:12,17:19)]
df_long <- merge(df_long, df_long2)
# then remove NaNs
df_long <- df_long %>% filter(!is.na(VAS))
# remove the initial trials - not important for now
init_burn <- filter(df_long, quality == 'init')
all_vas <- filter(df_long, quality != 'init')
# plot distribution of data
ggplot(df_long) +
geom_density(aes(VAS, colour = manipulation)) +
facet_wrap(~quality, scales = "free_y") +
theme_bw()
# summary statistics
# remove columns
df_corr <- df_res[, c(1:9,14:16,21)]
df_corr <- df_corr %>%
pivot_wider(names_from = 'manipulation', values_from = c('VAScold','VASwarm','VASburn')) %>%
select(c(ID,VAScold_CNT,VAScold_TGI,VASwarm_CNT,VASwarm_TGI,VASburn_CNT,VASburn_TGI)) %>%
rename(CNTcold = VAScold_CNT,
TGIcold = VAScold_TGI,
CNTwarm = VASwarm_CNT,
TGIwarm = VASwarm_TGI,
CNTburn = VASburn_CNT,
TGIburn = VASburn_TGI)
# average values within participants
df_corr <- aggregate(. ~ID, mean, data = df_corr)
# remove ID
df_corr <- select(df_corr, -ID)
# check distribution of data
df_means <- aggregate(VAS ~ ID*quality*manipulation, mean, data = vas_meds)
# calculate means
vas_meds <- aggregate(VAS ~ quality*manipulation*condition*cold_probe*ID,
median, data = all_vas)
vas_h1 <- aggregate(VAS ~ quality*manipulation*condition*ID, mean, data = vas_meds)
# change name of manipulation
vas_h1$manipulation <- factor(vas_h1$manipulation,
labels = c('Non-TGI', 'TGI'))
# summary means for h1
h1_sum <- summarySEwithin(data = vas_h1, measurevar = 'VAS',
withinvars = c('manipulation', 'quality', 'condition'))
# plot the summary statistics
# first colours
blue <- brewer.pal(8, "Blues")
grey <- brewer.pal(8, "Greys")
purp <- brewer.pal(8, "Purples")
oran <- brewer.pal(8, "Oranges")
gren <- brewer.pal(8, "Greens")
# order conditions
h1_sum$condition <- factor(h1_sum$condition, levels = c('within', 'across'))
h1_sum$quality <- factor(h1_sum$quality, levels = c('cold', 'warm', 'burn'))
# plot
ggplot(h1_sum, aes(colour = quality, group = manipulation, alpha = manipulation)) +
geom_point(aes(condition, VAS), size = 2, position = position_dodge(-.3)) +
geom_errorbar(aes(condition, ymin = VAS-ci, ymax = VAS+ci), width = .1, size = .7,
position = position_dodge(-.3)) +
geom_line(aes(condition, VAS), size = .7, position = position_dodge(-.3)) +
facet_wrap(~quality) +
scale_colour_manual(values = c(blue[5], oran[5], purp[5])) +
scale_alpha_discrete(range = c(0.6, 1)) +
ylim(0,50) +
theme_bw()
# remove columns
df_corr <- df_res[, c(1:9,14:16,21)]
df_corr <- df_corr %>%
pivot_wider(names_from = 'manipulation', values_from = c('VAScold','VASwarm','VASburn')) %>%
select(c(ID,VAScold_CNT,VAScold_TGI,VASwarm_CNT,VASwarm_TGI,VASburn_CNT,VASburn_TGI)) %>%
rename(CNTcold = VAScold_CNT,
TGIcold = VAScold_TGI,
CNTwarm = VASwarm_CNT,
TGIwarm = VASwarm_TGI,
CNTburn = VASburn_CNT,
TGIburn = VASburn_TGI)
# average values within participants
df_corr <- aggregate(. ~ID, mean, data = df_corr)
# remove ID
df_corr <- select(df_corr, -ID)
# check distribution of data
df_means <- aggregate(VAS ~ ID*quality*manipulation, mean, data = vas_meds)
ggplot(df_means, aes(colour = quality)) +
geom_density(aes(VAS)) +
theme_bw()
# correlate
qual_cor <- hetcor(df_corr, type = 'pearson')
cormat <- qual_cor$correlations
# significance values
p <- cor.mtest(df_corr, type ='pearson')$p
# correlation matrix
# plotting correlations between variables
corrplot(cormat, type = 'lower',
p.mat = p, insig = "p-value", sig.level = -1,
title = "VAS rating correlation matrix",
mar = c(0,0,1,0),
tl.cex=0.9)
# Non TGI plots
ggplot(df_corr, aes(x = CNTcold, y =CNTwarm)) +
geom_smooth(method='lm', colour = 'black', alpha = .5) +
geom_point(size = 1.5, shape = 21, colour = 'grey10', fill = 'grey60') +
geom_text(aes(label = paste0("R = ",
round(cormat[1,3], 2))),
x=8, y=90, size = 5) +
labs(x = 'Cold Ratings', y = 'Warm Ratings') +
xlim(0,100) + ylim(-15,100) +
theme_bw() -> CNT_cw_plot
ggplot(df_corr, aes(x = CNTcold, y = CNTburn)) +
geom_smooth(method='lm', colour = 'black', alpha = .5) +
geom_point(size = 1.5, shape = 21, colour = 'grey10', fill = 'grey60') +
geom_text(aes(label = paste0("R = ",
round(cormat[1,5], 2))),
x=8, y=90, size = 5) +
labs(x = 'Cold Ratings', y = 'Burn Ratings') +
xlim(0,100) + ylim(-15,100) +
theme_bw() -> CNT_cb_plot
ggplot(df_corr, aes(x = CNTwarm, y = CNTburn)) +
geom_smooth(method='lm', colour = 'black', alpha = .5) +
geom_point(size = 1.5, shape = 21, colour = 'grey10', fill = 'grey60') +
geom_text(aes(label = paste0("R = ",
round(cormat[3,5], 2))),
x=8, y=90, size = 5) +
labs(x = 'Warm Ratings', y = 'Burn Ratings') +
xlim(0,100) + ylim(-15,100) +
theme_bw() -> CNT_wb_plot
# combine non TGI
CNT_corr_plot <- ggarrange(CNT_cw_plot, CNT_cb_plot, CNT_wb_plot,
nrow = 1, ncol = 3,
labels = c('A','B','C'))
CNT_corr_plot <- annotate_figure(CNT_corr_plot,
top = text_grob("Non-TGI",
size = 12))
# TGI plots
ggplot(df_corr, aes(x = TGIcold, y = TGIwarm)) +
geom_smooth(method='lm', colour = 'black', alpha = .5) +
geom_point(size = 1.5, shape = 21, colour = 'grey10', fill = 'grey60') +
geom_text(aes(label = paste0("R = ",
round(cormat[2,4], 2))),
x=8, y=90, size = 5) +
labs(x = 'Cold Ratings', y = 'Warm Ratings') +
xlim(0,100) + ylim(-15,100) +
theme_bw() -> TGI_cw_plot
ggplot(df_corr, aes(x = TGIcold, y = TGIburn)) +
geom_smooth(method='lm', colour = 'black', alpha = .5) +
geom_point(size = 1.5, shape = 21, colour = 'grey10', fill = 'grey60') +
geom_text(aes(label = paste0("R = ",
round(cormat[2,6], 2))),
x=8, y=90, size = 5) +
labs(x = 'Cold Ratings', y = 'Burn Ratings') +
xlim(0,100) + ylim(-15,100) +
theme_bw() -> TGI_cb_plot
ggplot(df_corr, aes(x = TGIwarm, y = TGIburn)) +
geom_smooth(method='lm', colour = 'black', alpha = .5) +
geom_point(size = 1.5, shape = 21, colour = 'grey10', fill = 'grey60') +
geom_text(aes(label = paste0("R = ",
round(cormat[4,6], 2))),
x=8, y=90, size = 5) +
labs(x = 'Warm Ratings', y = 'Burn Ratings') +
xlim(0,100) + ylim(-15,100) +
theme_bw() -> TGI_wb_plot
# combine TGI
TGI_corr_plot <- ggarrange(TGI_cw_plot, TGI_cb_plot, TGI_wb_plot,
nrow = 1, ncol = 3,
labels = c('D','E','F'))
TGI_corr_plot <- annotate_figure(TGI_corr_plot,
top = text_grob("TGI",
size = 12))
# put two together
corr_plot <- ggarrange(CNT_corr_plot, TGI_corr_plot,
nrow = 2, ncol = 1)
corr_plot
ggsave('stgi_correlations.png', corr_plot, device = NULL, path = anaPath,
width = 14, height = 9, dpi = 1000)
rm(list=ls())
install.packages('TMB', type = 'source')
install.packages("TMB", type = "source")
knitr::opts_chunk$set(echo = TRUE)
## Loading libraries
# check for pacman package and install if not found
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson
)
# paths
datPath <- '/Users/au706616/Documents/Experiments/SPINALTGI/exp2/Raw/'
anaPath <- '/Users/au706616/Documents/Experiments/SPINALTGI/exp2/Analysis/'
# Extract all .csv files and compile
filenames <- dir(datPath, recursive = TRUE, full.names = FALSE, pattern = '.csv')
# empty dataframes for data
## with new data trials file will have changed to include temperature coding!
df_trials <- read.csv(text='procedure,trial_type,arm,condition,dermatome,order,cold_probe,trial_n,coolTemp,warmTempID,manipulation')
df_VAS <- read.csv(text='VASinit,VASburn,VASwarm,VAScold,trial_n,ID,manipulation')
df_RT <- read.csv(text='RTinit,RTburn,RTwarm,RTcold,trial_n,ID,manipulation')
## Data compiling
# trial files
setwd(datPath)
for (file in filenames){
# trial files
if (isTRUE(substr(basename(file), 24, 24)=="t")){
tmp <- read.csv(file)
tmp$ID <- substr(basename(file), 4, 6)
tmp$manipulation <- substr(basename(file), 17, 19)
df_trials <- rbind(df_trials, tmp)
}
# VAS response files
if (isTRUE(substr(basename(file), 24, 29)=="rating")){
tmp <- read.csv(file, header = FALSE)
colnames(tmp) <- c('VASinit','VASburn','VASwarm','VAScold','trial_n')
tmp$ID <- substr(basename(file), 4, 6)
tmp$manipulation <- substr(basename(file), 17, 19)
df_VAS <- rbind(df_VAS, tmp)
}
# VAS RT files
if (isTRUE(substr(basename(file), 24, 29)=="respti")){
tmp <- read.csv(file, header = FALSE)
colnames(tmp) <- c('RTinit','RTburn','RTwarm','RTcold','trial_n')
tmp$ID <- substr(basename(file), 4, 6)
tmp$manipulation <- substr(basename(file), 17, 19)
df_RT <- rbind(df_RT, tmp)
}
}
# merge all files
df_res <- merge(df_trials, df_VAS, by = c('ID','trial_n','manipulation'))
df_res <- merge(df_res, df_RT, by = c('ID','trial_n','manipulation'))
View(df_res)
# remove participants 047 and 048
# one had ongoing pain, the other missed 6 trials
df_res <- df_res[df_res$ID != '047' ,]
df_res <- df_res[df_res$ID != '048' ,]
# transform the ID of participants to remove 0
df_res$ID <- as.numeric(df_res$ID)
# recode conditions
df_res <- df_res %>%
mutate(condition = dplyr::recode(condition, '1' = 'within', '2' = 'across'),
cold_probe = dplyr::recode(cold_probe, 'C6' = 'rostral', 'T1' = 'caudal',
'dist' = 'distal', 'prox' = 'proximal'))
# change levels
df_res$cold_probe <- factor(df_res$cold_probe,
levels = c("caudal", "rostral", "distal", "proximal"))
# incorporate demographics
# the warm and cold TGI and CNT temperatures did not code properly on the trial .csv
# have saved these in the demo .csv as well, so will add these in
demoFile <- 'STGI_participant-demographics.csv'
fileName = paste(datPath, demoFile, sep = '')
df_demo <- read.csv(fileName)
# Calculate median burning rating for all participants
# TGI trials only
# Then flag how many are not sig > 0
df_med <- aggregate(VASburn~ID*manipulation*cold_probe*trial_type, median, data = df_res)
tgi <-  df_med %>%
filter(manipulation == 'TGI')
cnt <-  df_med %>%
filter(manipulation == 'CNT')
# identify test results where pvalue is < .05
tgi$ID <- as.factor(tgi$ID)
i = 0
test = data.frame(matrix(nrow = 40, ncol = 3))
colnames(test) <- c('ID','pval','responder')
for (id in levels(tgi$ID)){
i = i+1
tmp1 <- tgi[tgi$ID == id ,]
test$ID[i] <- id
test$pval[i] <- (t.test(tmp1$VASburn, mu = 0, alternative = 'greater'))$p.value
test$responder[i] <- isTRUE(test$pval[i] < .05)
}
# combine responder logic with main data-frame
test$responder <- ifelse(test$responder == TRUE, 1, 0)
test <- test[, c(1,3)]
df_res <- merge(df_res, test, by = 'ID')
# count the number of false responses
nNONRESP <- sum(test$responder == FALSE)
# print
print(paste0('Non responders: ', nNONRESP, '/', length(test$ID)))
df_med <- aggregate(VASburn~ID*manipulation*cold_probe*trial_type, median, data = df_res)
tgi <-  df_med %>%
filter(manipulation == 'TGI')
cnt <-  df_med %>%
filter(manipulation == 'CNT')
View(df_med)
# identify test results where pvalue is < .05
tgi$ID <- as.factor(tgi$ID)
i = 0
test = data.frame(matrix(nrow = 40, ncol = 3))
colnames(test) <- c('ID','pval','responder')
View(test)
for (id in levels(tgi$ID)){
i = i+1
tmp1 <- tgi[tgi$ID == id ,]
test$ID[i] <- id
test$pval[i] <- (t.test(tmp1$VASburn, mu = 0, alternative = 'greater'))$p.value
test$responder[i] <- isTRUE(test$pval[i] < .05)
}
# identify test results where pvalue is < .05
tgi$ID <- as.factor(tgi$ID)
i = 0
test = data.frame(matrix(nrow = 27, ncol = 3))
colnames(test) <- c('ID','pval','responder')
rm(test)
# identify test results where pvalue is < .05
tgi$ID <- as.factor(tgi$ID)
i = 0
test = data.frame(matrix(nrow = 27, ncol = 3))
colnames(test) <- c('ID','pval','responder')
for (id in levels(tgi$ID)){
i = i+1
tmp1 <- tgi[tgi$ID == id ,]
test$ID[i] <- id
test$pval[i] <- (t.test(tmp1$VASburn, mu = 0, alternative = 'greater'))$p.value
test$responder[i] <- isTRUE(test$pval[i] < .05)
}
View(test)
# combine responder logic with main data-frame
test$responder <- ifelse(test$responder == TRUE, 1, 0)
test <- test[, c(1,3)]
df_res <- merge(df_res, test, by = 'ID')
# count the number of false responses
nNONRESP <- sum(test$responder == FALSE)
# print
print(paste0('Non responders: ', nNONRESP, '/', length(test$ID)))
