filter(quality == 'warm'),
aes(x = as.numeric(cold_code), y = VAS),
colour = 'grey20', size = .7, alpha = .6,
position = position_nudge(nudge1)) +
facet_wrap(~manipulation) +
scale_colour_manual(values = c(oran[4], oran[6])) +
scale_fill_manual(values = c(oran[4], oran[6])) +
scale_x_continuous(breaks = c(1,2,3,4), labels = c('prox.','dist.','rost.','caud.')) +
labs(title = 'Warm ratings', x = 'Location of cold probe',
y = NULL) +
ylim(-0.5,100) +
theme_classic() +
theme(legend.position = 'none') -> h2_warm_plot
# BURN
ggplot(data = vas_meds %>%
filter(quality == 'burn'),
mapping = aes(x = xj, y = VAS, colour = manipulation, fill = manipulation)) +
geom_point(shape = 21, alpha = .5, position = position_nudge(nudge2)) +
geom_half_violin(
data = vas_meds %>%
filter(quality == 'burn', cold_probe == 'proximal'),
aes(x = xj, y = VAS),
position = position_nudge(x = nudge1), side = "l", alpha = .4) +
geom_half_violin(
data = vas_meds %>%
filter(quality == 'burn', cold_probe == 'distal'),
aes(x = xj, y = VAS),
position = position_nudge(x = nudge1), side = "l", alpha = .4) +
geom_half_violin(
data = vas_meds %>%
filter(quality == 'burn', cold_probe == 'rostral'),
aes(x = xj, y = VAS),
position = position_nudge(x = nudge1), side = "l", alpha = .4) +
geom_half_violin(
data = vas_meds %>%
filter(quality == 'burn', cold_probe == 'caudal'),
aes(x = xj, y = VAS),
position = position_nudge(x = nudge1), side = "l", alpha = .4) +
# summary stats
geom_point(data = h2_sum %>%
filter(quality == 'burn'),
aes(x = as.numeric(cold_code), y = VAS),
shape = 21, size = 2, colour = 'grey20', fill = 'grey30',
position = position_nudge(nudge1)) +
geom_errorbar(data = h2_sum %>%
filter(quality == 'burn'),
aes(x = as.numeric(cold_code), ymin = VAS-ci, ymax = VAS+ci),
colour = 'grey20', width = .05, size = .7,
position = position_nudge(nudge1)) +
geom_line(data = h2_sum %>%
filter(quality == 'burn'),
aes(x = as.numeric(cold_code), y = VAS),
colour = 'grey20', size = .7, alpha = .6,
position = position_nudge(nudge1)) +
facet_wrap(~manipulation) +
scale_colour_manual(values = c(purp[4], purp[6])) +
scale_fill_manual(values = c(purp[4], purp[6])) +
scale_x_continuous(breaks = c(1,2,3,4), labels = c('prox.','dist.','rost.','caud.')) +
labs(title = 'Burn ratings', x = 'Location of cold probe',
y = 'VAS Rating (0-100)') +
ylim(-0.5,100) +
theme_classic() +
theme(legend.position = 'none') -> h2_burn_plot
# arrange entire plot
h2_plot <- ggarrange(h2_cold_plot, h2_warm_plot, h2_burn_plot,
nrow = 2, ncol = 2)
h2_plot
ggsave('h2_alldat_plot.png', h2_plot, device = NULL, path = anaPath,
width = 8, height = 7, dpi = 600)
ggsave('h2_alldat_plot.png', h2_plot, device = NULL, path = anaPath,
width = 10, height = 7, dpi = 600)
ggsave('h2_alldat_plot.png', h2_plot, device = NULL, path = anaPath,
width = 10, height = 6, dpi = 600)
ggsave('h2_alldat_plot.png', h2_plot, device = NULL, path = anaPath,
width = 10, height = 6.5, dpi = 600)
library(simr)
library(broom)
library(brms)
library(modelsummary)
library(tibble)
library(DHARMa)
library(glmmTMB)
View(df_res)
View(df_long)
# to run zero inflated regressions need to make sure no values = 100,
# as cannot model them, so simply minus a very small fraction from those values
df_long$beta <- ifelse(df_long$rating==100, df_long$beta-0.0001, df_long$beta <- df_long$rating)
# to run zero inflated regressions need to make sure no values = 100,
# as cannot model them, so simply minus a very small fraction from those values
df_long$beta <- ifelse(df_long$VAS==100, df_long$beta-0.0001, df_long$beta <- df_long$VAS)
# recode cold_location and condition to reduce levels in regression
df_long$cold_cond[df_long$cold_probe == 'distal'] <- 'dist_rostr'
df_long$cold_cond[df_long$cold_probe == 'rostral'] <- 'dist_rostr'
df_long$cold_cond[df_long$cold_probe == 'proximal'] <- 'prox_caud'
df_long$cold_cond[df_long$cold_probe == 'caudal'] <- 'prox_caud'
# transform variables into proportions (aka divide by 100), this makes the effect size estimates more logical
df_long$beta <- df_long$beta/100
df_long$ID <- factor(df_long$ID)
# Try and model all with ratings
model.all = glmmTMB::glmmTMB(beta ~ manipulation + condition + cold_cond + quality + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long,
na.action = na.omit)
summary(model.all)
# Try and model all with ratings
model.all = glmmTMB::glmmTMB(beta ~ manipulation + condition + cold_cond + quality + trial_n +
quality*manipulation*condition + (1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long,
na.action = na.omit)
# Try and model all with ratings
model.all = glmmTMB::glmmTMB(beta ~ manipulation + condition + cold_cond + quality + trial_n +
quality*manipulation*condition + (1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long,
na.action = na.omit)
summary(model.all)
# Try and model all with ratings
model.all = glmmTMB::glmmTMB(beta ~ manipulation + condition + cold_cond + trial_n +
manipulation*condition + (1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long %>% filter(quality == 'cold'),
na.action = na.omit)
# Try and model all with ratings
model.cold = glmmTMB::glmmTMB(beta ~ manipulation + condition + cold_cond + trial_n +
manipulation*condition + (1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long %>% filter(quality == 'cold'),
na.action = na.omit)
summary(model.cold)
summary(model.warm)
# Try and model all with ratings
model.warm = glmmTMB::glmmTMB(beta ~ manipulation + condition + cold_cond + trial_n +
manipulation*condition + (1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long %>% filter(quality == 'warm'),
na.action = na.omit)
summary(model.warm)
# Try and model all with ratings
model.warm = glmmTMB::glmmTMB(beta ~ manipulation + condition + cold_cond + trial_n +
manipulation*condition*cold_cond + (1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long %>% filter(quality == 'warm'),
na.action = na.omit)
summary(model.warm)
# Try and model all with ratings
model.cold = glmmTMB::glmmTMB(beta ~ manipulation + condition + cold_cond + trial_n +
manipulation*condition*cold_cond + (1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long %>% filter(quality == 'cold'),
na.action = na.omit)
summary(model.cold)
# Try and model all with ratings
model.cold = glmmTMB::glmmTMB(beta ~ manipulation + condition + cold_cond + trial_n +
manipulation*condition*cold_cond + (1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation + (1|ID),
data = df_long %>% filter(quality == 'cold'),
na.action = na.omit)
summary(model.cold)
# Try and model all with ratings
model.warm = glmmTMB::glmmTMB(beta ~ manipulation + condition + cold_cond + trial_n +
manipulation*condition*cold_cond + (1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation + (1|ID),
data = df_long %>% filter(quality == 'warm'),
na.action = na.omit)
summary(model.warm)
rm(list=ls())
# this is getting unweildy, simplify (when you have the time)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)  # data manipulation
library(rcompanion)
library(reshape2)
library(lme4)
library(lmerTest)
library(gghalves)
library(ggpubr)
library(wesanderson)
library(Rmisc)
library(ROCR)
library(caret)
library(groupdata2)
library(boot)
library(rsample)
library(broom.mixed)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(lavaan) # for SEM
library(RColorBrewer)
library(ggpol)
Dpath <- '/Users/au706616/Documents/Experiments/PHS-SKULDNET'
Apath <- '/Users/au706616/Documents/Experiments/PHS-SKULDNET/analyses/h2'
filename <- "allsub_tsl2_208.csv"
tsl2 <- read.csv(file.path(Dpath,filename))
View(tsl2)
knitr::opts_chunk$set(echo = TRUE)
Dpath <- '/Users/au706616/Documents/Experiments/PHS-SKULDNET'
Apath <- '/Users/au706616/Documents/Experiments/PHS-SKULDNET/analyses/h3'
filename <- "skuldnet_all_results.csv"
all_dat <- read.csv(file.path(Dpath,filename))
View(all_dat)
all_dat <- all_dat[, c(5:20)]
# create QST dataframe
qst_dat <- all_dat %>% filter(task == 'qst')
View(qst_dat)
# create QST dataframe
qst_dat <- all_dat %>% filter(task == 'qst' & trials_to_keep == 0)
tsl1 <- all_dat %>% filter(task == 'qst' & trials_to_keep == 1)
View(tsl2)
tsl2 <- all_dat %>% filter(task == 'tsl2' & trials_to_keep == 1)
View(tsl1)
View(tsl2)
# create QST, TSL1 (normal TSL) and TSL2 (instruction, detection) dataframes
qst <- all_dat %>% filter(task == 'qst' & trials_to_keep == 0)
tsl1 <- all_dat %>% filter(task == 'qst' & trials_to_keep == 1)
tsl2 <- all_dat %>% filter(task == 'tsl2' & trials_to_keep == 1)
# then combine
big_dat <- rbind(qst, tsl1, tsl2)
View(big_dat)
View(big_dat)
library(tidyverse)
library(lavaan)
# Exploratory factor analysis in lavaan
# pivot wider so all components are in individual columns
dat_wide <- big_dat %>% pivot_wider(names_from = 'task', values_from = 'threshold')
View(all_dat)
View(dat_wide)
View(big_dat)
# Exploratory factor analysis in lavaan
# pivot wider so all components are in individual columns
dat_wide <- big_dat %>% pivot_wider(names_from = c('task', 'baseline'), values_from = 'threshold')
View(dat_wide)
# Exploratory factor analysis in lavaan
# pivot wider so all components are in individual columns
dat_wide <- pivot_wider(big_dat, names_from = 'task', values_from = 'threshold')
View(big_dat)
View(dat_wide)
View(qst)
# convert all values <0 to 0 (software delay, should not go <0)
all_dat[all_dat$threshold < 0] == 0
# convert all values <0 to 0 (software delay, should not go <0)
all_dat$threshold[all_dat$threshold < 0] == 0
Dpath <- '/Users/au706616/Documents/Experiments/PHS-SKULDNET'
Apath <- '/Users/au706616/Documents/Experiments/PHS-SKULDNET/analyses/h3'
filename <- "skuldnet_all_results.csv"
all_dat <- read.csv(file.path(Dpath,filename))
all_dat <- all_dat[, c(5:20)]
# convert all values <0 to 0 (software delay, should not go <0)
all_dat$threshold[all_dat$threshold < 0] = 0
# create QST, TSL1 (normal TSL) and TSL2 (instruction, detection) dataframes
qst <- all_dat %>% filter(task == 'qst' & trials_to_keep == 0)
tsl1 <- all_dat %>% filter(task == 'qst' & trials_to_keep == 1)
tsl2 <- all_dat %>% filter(task == 'tsl2' & trials_to_keep == 1)
# then combine all tasks of interest in one frame
big_dat <- rbind(qst, tsl1, tsl2)
# rename and merge so all components are in an individual column
# what do we do about baseline in this situation?
View(all_dat)
View(qst)
View(qst)
View(tsl1)
# average across trials for tsl task (so there are the same n per baseline for each)
tsl1_av <- aggregate(threshold ~ exp_id * task * instruction * quality * baseline, mean, data = tsl1)
tsl1_phs <- aggregate(phs ~ exp_id * task * instruction * quality * baseline, sum, data = tsl1)
View(tsl1)
View(tsl1_phs)
tsl2_av <- aggregate(threshold ~ exp_id * task * instruction * quality * baseline, mean, data = tsl2)
View(tsl2_av)
tsl2_phs <- aggregate(phs ~ exp_id * task * instruction * quality * baseline, sum, data = tsl2)
View(tsl2_phs)
View(qst)
# merge phs and mean threshold
tsl1_av <- merge(tsl1_av, tsl1_phs)
View(tsl1_av)
View(qst)
tsl2_av <- merge(tsl2_av, tsl2_phs)
# cut down qst and merge all together
qst <- qst[, c(1,6:11, 14)]
dat_av <- rbind(qst,tsl1_av,ts2_av)
dat_av <- rbind(qst,tsl1_av,tsl2_av)
# create QST, TSL1 (normal TSL) and TSL2 (instruction, detection) dataframes
qst <- all_dat %>% filter(task == 'qst' & trials_to_keep == 0)
# cut down qst and bind all together
qst <- qst[, c(1,6:8,10,11, 14)]
dat_av <- rbind(qst,tsl1_av,tsl2_av)
View(dat_av)
View(tsl1)
View(tsl1_av)
# pivot wider so that 1 row = 1 participant
tsl1_av <- pivot_wider(names_from = quality, values_from = c('threshold','phs'))
# pivot wider so that 1 row = 1 participant
tsl1_av <- pivot_wider(names_from = 'quality', values_from = c('threshold','phs'))
class(tsl1_av$quality)
# pivot wider so that 1 row = 1 participant
tsl1_av$quality <- as.factor(tsl1_av$quality)
tsl1_av <- pivot_wider(names_from = 'quality', values_from = c('threshold','phs'))
tsl1_av <- pivot_wider(names_from = 'quality', values_from = 'threshold')
tsl1_av <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = c('threshold','phs'))
View(tsl1_av)
tsl1_av <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = c('threshold','phs')) %>%
rename('tsl1_cold' == 'threshold_cold')
# average across trials for tsl task (so there are the same n per baseline for each)
tsl1_av <- aggregate(threshold ~ exp_id * task * instruction * quality * baseline, mean, data = tsl1)
# merge phs and mean threshold
tsl1_av <- merge(tsl1_av, tsl1_phs)
# pivot wider so that 1 row = 1 participant
tsl1_av$quality <- as.factor(tsl1_av$quality)
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = c('threshold','phs')) %>%
rename('tsl1_cold' == 'threshold_cold')
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = c('threshold','phs')) %>%
rename(tsl1_cold == threshold_cold)
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = c('threshold','phs')) %>%
rename(tsl1_cold = threshold_cold)
View(tsl1_av_wide)
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = c('threshold','phs')) %>%
rename(tsl1_thresh_cold = threshold_cold,
tsl1_thresh_warm = threshold_warm,
tsl1_phs_cold = phs_cold,
tsl1_phs_warm = phs_warm)
View(tsl1_av_wide)
# average across trials for tsl task (so there are the same n per baseline for each)
tsl1_av <- aggregate(threshold ~ exp_id * task * instruction * quality * baseline, mean, data = tsl1)
#tsl1_phs <- aggregate(phs ~ exp_id * task * instruction * quality * baseline, sum, data = tsl1)
tsl2_av <- aggregate(threshold ~ exp_id * task * instruction * quality * baseline, mean, data = tsl2)
# pivot wider so that 1 row = 1 participant
# tsl1
tsl1_av$quality <- as.factor(tsl1_av$quality)
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = c('threshold','phs')) %>%
rename(tsl1_thresh_cold = threshold_cold,
tsl1_thresh_warm = threshold_warm)
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = 'threshold') %>%
rename(tsl1_thresh_cold = threshold_cold,
tsl1_thresh_warm = threshold_warm)
# pivot wider so that 1 row = 1 participant
# tsl1
tsl1_av$quality <- as.factor(tsl1_av$quality)
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = 'threshold') %>%
rename(tsl1_thresh_cold = threshold_cold,
tsl1_thresh_warm = threshold_warm)
View(tsl1_av_wide)
# pivot wider so that 1 row = 1 participant
# tsl1
tsl1_av$quality <- as.factor(tsl1_av$quality)
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = 'threshold') %>%
rename(tsl1_thresh_cold = threshold_cold,
tsl1_thresh_warm = threshold_warm)
View(tsl2_av)
View(tsl1_av_wide)
rm(tsl1_av_wide)
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = 'threshold') %>%
rename(tsl1_thresh_cold = threshold_cold,
tsl1_thresh_warm = threshold_warm)
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = 'threshold')
View(tsl1_av_wide)
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = 'threshold') %>%
rename(tsl1_cold = cold,
tsl1_warm = warm)
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = 'quality', values_from = 'threshold') %>%
rename(tsl2_cold = cold,
tsl2_warm = warm)
View(tsl2_av_wide)
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = 'quality', values_from = c('threshold','baseline'))
View(tsl2_av_wide)
tsl2_av$baseline <- as.factor(tsl2_av$baseline)
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = 'quality', values_from = c('threshold','baseline')) %>%
rename(tsl2_cold = cold,
tsl2_warm = warm)
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = 'quality', values_from = c('threshold','baseline'))
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = c('baseline','quality'), values_from = 'threshold')
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = c('quality','baseline'), values_from = 'threshold') %>%
rename(tsl2_cold_32 = cold_32,
tsl2_cold_38 = cold_38,
tsl2_cold_44 = cold_44,
tsl2_warm_32 = warm_32)
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = c('quality','instruction','baseline'), values_from = 'threshold') %>%
rename(tsl2_cold_detect_32 = cold_32,
tsl2_cold_detect_38 = cold_38,
tsl2_cold_detect_44 = cold_44,
tsl2_warm_detect_32 = warm_32,
tsl2_cold_pain_32 = cold_32,
tsl2_cold_pain_38 = cold_38,
tsl2_cold_pain_44 = cold_44)
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = c('quality','instruction','baseline'), values_from = 'threshold') %>%
rename(tsl2_cold_detect_32 = cold_detect_32,
tsl2_cold_detect_38 = cold_detect_38,
tsl2_cold_detect_44 = cold_detect_44,
tsl2_warm_detect_32 = warm_detect_32,
tsl2_cold_pain_32 = cold_pain_32,
tsl2_cold_pain_38 = cold_pain_38,
tsl2_cold_pain_44 = cold_pain_44)
# create QST, TSL1 (normal TSL) and TSL2 (instruction, detection) dataframes
qst <- all_dat %>% filter(task == 'qst' & trials_to_keep == 0)
View(qst_dat)
# cut down qst and pivot wider
qst <- qst[, c(1,6:8,10,11)]
qst_wide <- qst %>%
pivot_wider(names_from = c('quality','instruction'), values_from = 'threshold') %>%
rename(qst_cold_detect = cold_detect,
qst_warm_detect = warm_detect,
qst_cold_pain = cold_pain,
qst_warm_pain = warm_pain)
View(qst_wide)
# merge all together
fa_dat <- merge(qst_wide, tsl1_av_wide)
fa_dat <- merge(fa_dat, tsl2_av_wide)
View(fa_dat)
View(qst_wide)
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = 'threshold') %>%
rename(tsl1_cold = cold,
tsl1_warm = warm) %>%
select(-c(task, baseline))
View(tsl1_av_wide)
tsl1_av_wide <- tsl1_av %>%
pivot_wider(names_from = 'quality', values_from = 'threshold') %>%
rename(tsl1_cold = cold,
tsl1_warm = warm) %>%
select(-c(task, baseline, instruction))
rename(tsl2_cold_detect_32 = cold_detect_32,
tsl2_cold_detect_38 = cold_detect_38,
tsl2_cold_detect_44 = cold_detect_44,
tsl2_warm_detect_32 = warm_detect_32,
tsl2_cold_pain_32 = cold_pain_32,
tsl2_cold_pain_38 = cold_pain_38,
tsl2_cold_pain_44 = cold_pain_44) %>%
select(-c(task, baseline, instruction))
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = c('quality','instruction','baseline'), values_from = 'threshold') %>%
rename(tsl2_cold_detect_32 = cold_detect_32,
tsl2_cold_detect_38 = cold_detect_38,
tsl2_cold_detect_44 = cold_detect_44,
tsl2_warm_detect_32 = warm_detect_32,
tsl2_cold_pain_32 = cold_pain_32,
tsl2_cold_pain_38 = cold_pain_38,
tsl2_cold_pain_44 = cold_pain_44) %>%
select(-c(task, baseline, instruction))
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = c('quality','instruction','baseline'), values_from = 'threshold') %>%
rename(tsl2_cold_detect_32 = cold_detect_32,
tsl2_cold_detect_38 = cold_detect_38,
tsl2_cold_detect_44 = cold_detect_44,
tsl2_warm_detect_32 = warm_detect_32,
tsl2_cold_pain_32 = cold_pain_32,
tsl2_cold_pain_38 = cold_pain_38,
tsl2_cold_pain_44 = cold_pain_44) %>%
select(-c(task, instruction))
tsl2_av_wide <- tsl2_av %>%
pivot_wider(names_from = c('quality','instruction','baseline'), values_from = 'threshold') %>%
rename(tsl2_cold_detect_32 = cold_detect_32,
tsl2_cold_detect_38 = cold_detect_38,
tsl2_cold_detect_44 = cold_detect_44,
tsl2_warm_detect_32 = warm_detect_32,
tsl2_cold_pain_32 = cold_pain_32,
tsl2_cold_pain_38 = cold_pain_38,
tsl2_cold_pain_44 = cold_pain_44) %>%
select(-c(task))
qst_wide <- qst %>%
pivot_wider(names_from = c('quality','instruction'), values_from = 'threshold') %>%
rename(qst_cold_detect = cold_detect,
qst_warm_detect = warm_detect,
qst_cold_pain = cold_pain,
qst_warm_pain = warm_pain) %>%
select(-c(task, baseline))
View(tsl2_av_wide)
# merge all
fa_dat <- merge(qst_wide, tsl1_av_wide)
fa_dat <- merge(fa_dat, tsl2_av_wide)
View(fa_dat)
# Correlation
cor(fa_dat)
# Correlation
# remove participants with NAs
fa_dat <- filter(fa_dat, is.na(tsl2_cold_pain_44))
cor(fa_dat)
# merge all
fa_dat <- merge(qst_wide, tsl1_av_wide)
fa_dat <- merge(fa_dat, tsl2_av_wide)
# Correlation
# remove participants with NAs
fa_dat <- filter(fa_dat, !is.na(tsl2_cold_pain_44))
cor(fa_dat)
