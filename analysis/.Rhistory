tgi_cold <- df_sum[df_sum$manipulation == 'TGI' & df_sum$VAS == 'cold' ,]
tgi_warm <- df_sum[df_sum$manipulation == 'TGI' & df_sum$VAS == 'warm' ,]
tgi_burn <- df_sum[df_sum$manipulation == 'TGI' & df_sum$VAS == 'burn' ,]
View(df_VAS)
simulate_subj <- function(subid, llim, ulim) {
# trial info
trialN = 12
conditionN = 8
ratingN = 3
# creating simulation data-frame
df <- data.frame(matrix(ncol = 0, nrow = trialN*conditionN*ratingN))
df$id <- rep(subid,trialN*conditionN*ratingN)
df$trialn <- rep(1:trialN,conditionN*ratingN)
df$dermatome <- rep(rep(c(rep("within",trialN*2), rep("across",trialN*2)),2),ratingN)
df$cold_location <- rep(rep(c(rep("dist_rostr",trialN), rep("prox_caud", trialN)),conditionN/2),ratingN)
df$stimuli <- rep(c(rep("tgi",trialN*conditionN/2), rep("non-tgi",trialN*conditionN/2)),ratingN)
df$quality <- c(rep("cold",trialN*conditionN), rep("warm",trialN*conditionN), rep("burn",trialN*conditionN))
# Simulate data here based on means and standard deviations of the above pilot sample
# Cold ratings: simulation
# tgi
w_dr_tgi_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_cold, condition == 'within' & cold_location == 'dist_rostr')[, 5],
sd=filter(tgi_cold, condition == 'within' & cold_location == 'dist_rostr')[, 6])
w_pc_tgi_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_cold, condition == 'within' & cold_location == 'prox_caud')[, 5],
sd=filter(tgi_cold, condition == 'within' & cold_location == 'prox_caud')[, 6])
a_dr_tgi_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_cold, condition == 'across' & cold_location == 'dist_rostr')[, 5],
sd=filter(tgi_cold, condition == 'across' & cold_location == 'dist_rostr')[, 6])
a_pc_tgi_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_cold, condition == 'across' & cold_location == 'prox_caud')[, 5],
sd=filter(tgi_cold, condition == 'across' & cold_location == 'prox_caud')[, 6])
# control
w_dr_cnt_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_cold, condition == 'within' & cold_location == 'dist_rostr')[, 5],
sd=filter(cnt_cold, condition == 'within' & cold_location == 'dist_rostr')[, 6])
w_pc_cnt_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_cold, condition == 'within' & cold_location == 'prox_caud')[, 5],
sd=filter(cnt_cold, condition == 'within' & cold_location == 'prox_caud')[, 6])
a_dr_cnt_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_cold, condition == 'across' & cold_location == 'dist_rostr')[, 5],
sd=filter(cnt_cold, condition == 'across' & cold_location == 'dist_rostr')[, 6])
a_pc_cnt_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_cold, condition == 'across' & cold_location == 'prox_caud')[, 5],
sd=filter(cnt_cold, condition == 'across' & cold_location == 'prox_caud')[, 6])
# Warm ratings: simulation
# tgi
w_dr_tgi_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_warm, condition == 'within' & cold_location == 'dist_rostr')[, 5],
sd=filter(tgi_warm, condition == 'within' & cold_location == 'dist_rostr')[, 6])
w_pc_tgi_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_warm, condition == 'within' & cold_location == 'prox_caud')[, 5],
sd=filter(tgi_warm, condition == 'within' & cold_location == 'prox_caud')[, 6])
a_dr_tgi_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_warm, condition == 'across' & cold_location == 'dist_rostr')[, 5],
sd=filter(tgi_warm, condition == 'across' & cold_location == 'dist_rostr')[, 6])
a_pc_tgi_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_warm, condition == 'across' & cold_location == 'prox_caud')[, 5],
sd=filter(tgi_warm, condition == 'across' & cold_location == 'prox_caud')[, 6])
# control
w_dr_cnt_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_warm, condition == 'within' & cold_location == 'dist_rostr')[, 5],
sd=filter(cnt_warm, condition == 'within' & cold_location == 'dist_rostr')[, 6])
w_pc_cnt_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_warm, condition == 'within' & cold_location == 'prox_caud')[, 5],
sd=filter(cnt_warm, condition == 'within' & cold_location == 'prox_caud')[, 6])
a_dr_cnt_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_warm, condition == 'across' & cold_location == 'dist_rostr')[, 5],
sd=filter(cnt_warm, condition == 'across' & cold_location == 'dist_rostr')[, 6])
a_pc_cnt_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_warm, condition == 'across' & cold_location == 'prox_caud')[, 5],
sd=filter(cnt_warm, condition == 'across' & cold_location == 'prox_caud')[, 6])
# Burning ratings: simulation
# tgi
w_dr_tgi_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_burn, condition == 'within' & cold_location == 'dist_rostr')[, 5],
sd=filter(tgi_burn, condition == 'within' & cold_location == 'dist_rostr')[, 6])
w_pc_tgi_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_burn, condition == 'within' & cold_location == 'prox_caud')[, 5],
sd=filter(tgi_burn, condition == 'within' & cold_location == 'prox_caud')[, 6])
a_dr_tgi_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_burn, condition == 'across' & cold_location == 'dist_rostr')[, 5],
sd=filter(tgi_burn, condition == 'across' & cold_location == 'dist_rostr')[, 6])
a_pc_tgi_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_burn, condition == 'across' & cold_location == 'prox_caud')[, 5],
sd=filter(tgi_burn, condition == 'across' & cold_location == 'prox_caud')[, 6])
# control
w_dr_cnt_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_burn, condition == 'within' & cold_location == 'dist_rostr')[, 5],
sd=filter(cnt_burn, condition == 'within' & cold_location == 'dist_rostr')[, 6])
w_pc_cnt_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_burn, condition == 'within' & cold_location == 'prox_caud')[, 5],
sd=filter(cnt_burn, condition == 'within' & cold_location == 'prox_caud')[, 6])
a_dr_cnt_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_burn, condition == 'across' & cold_location == 'dist_rostr')[, 5],
sd=filter(cnt_burn, condition == 'across' & cold_location == 'dist_rostr')[, 6])
a_pc_cnt_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_burn, condition == 'across' & cold_location == 'prox_caud')[, 5],
sd=filter(cnt_burn, condition == 'across' & cold_location == 'prox_caud')[, 6])
# creating rating variable
df$rating <- c(w_dr_tgi_cold, w_pc_tgi_cold, a_dr_tgi_cold, a_pc_tgi_cold,
w_dr_cnt_cold, w_pc_cnt_cold, a_dr_cnt_cold, a_pc_cnt_cold,
w_dr_tgi_warm, w_pc_tgi_warm, a_dr_tgi_warm, a_pc_tgi_warm,
w_dr_cnt_warm, w_pc_cnt_warm, a_dr_cnt_warm, a_pc_cnt_warm,
w_dr_tgi_burn, w_pc_tgi_burn, a_dr_tgi_burn, a_pc_tgi_burn,
w_dr_cnt_burn, w_pc_cnt_burn, a_dr_cnt_burn, a_pc_cnt_burn)
return(df)}
po_c <- po
# First model cold VAS
model <- function(x, vas = c('cold','warm','burn')) {
if (vas[1] == 'cold'){
x1 <- x %>%  filter(quality == 'cold')
} else if (vas[1] == 'warm'){
} else if (vas[1] == 'burn') {
x1 <- x %>%  filter(quality == 'burn')
}
mod = glmmTMB::glmmTMB(
rating ~ stimuli + dermatome + cold_location + trialn + (1|id),
family = glmmTMB::beta_family(),
ziformula = ~1+stimuli,
data = x1,
na.action = na.omit)
return(summary(mod))}
# the warm model has the smallest effect size, so should extract power calculation for this model only
# do this for 40 participants, for 1000 simulations
nSims <- 1000
n <- 32 # number of participants to simulate
po <- data.frame()
for (i in 1:nSims){
# creating individual data-frames from simulated data
df_sim <- data.frame()
for (i in 1:n) {
df <- simulate_subj(i, 0, 1)
df_sim <- rbind(df_sim,df)
}
# then run the model based on simulated data
m <- model(df_csim, 'cold')
# extracting the p-value and effect size
tmp <- c(m$coefficients$cond[4,4], m$coefficients$cond[4,1])
po <- rbind(po,tmp)
}
# the warm model has the smallest effect size, so should extract power calculation for this model only
# do this for 40 participants, for 1000 simulations
nSims <- 1000
n <- 32 # number of participants to simulate
po <- data.frame()
for (i in 1:nSims){
# creating individual data-frames from simulated data
df_sim <- data.frame()
for (i in 1:n) {
df <- simulate_subj(i, 0, 1)
df_sim <- rbind(df_sim,df)
}
# then run the model based on simulated data
m <- model(df_sim, 'cold')
# extracting the p-value and effect size
tmp <- c(m$coefficients$cond[4,4], m$coefficients$cond[4,1])
po <- rbind(po,tmp)
}
View(df_sim)
# Summarise beta per rating, per condition, per participant
# mean
df_sum <- aggregate(beta~ID*manipulation*condition*cold_location*VAS,
median, data = df_VAS)
setnames(df_sum, "beta", "mean")
# Summarise beta per rating, per condition, per participant
# mean
df_sum_pp <- aggregate(beta~ID*manipulation*condition*cold_location*VAS,
median, data = df_VAS)
View(df_sum_pp)
source("~/.active-rstudio-document", echo=TRUE)
# now summarise across participants
df_sum <- aggregate(beta~manipulation*condition*cold_location*VAS,
mean, data = df_sum_pp)
setnames(df_sum, "beta", "mean")
# standard deviation
df_sd <- aggregate(beta~manipulation*condition*cold_location*VAS,
SD, data = df_VAS)
# standard deviation
df_sd <- aggregate(beta~manipulation*condition*cold_location*VAS,
SD, data = df_sum_pp)
setnames(df_sd, "beta", "std")
# merge
df_sum <- merge(df_sum, df_sd)
View(df_sum)
# need to recode levels for cold_probe to reduce number of levels from 4 to 2
df$cold_location[df$cold_probe == 'distal'] <- 'dist_rostr'
df$cold_location[df$cold_probe == 'rostral'] <- 'dist_rostr'
df$cold_location[df$cold_probe == 'proximal'] <- 'prox_caud'
df$cold_location[df$cold_probe == 'caudal'] <- 'prox_caud'
df$cold_location <- as.factor(df$cold_location)
# reshape data so that there is one rating column per participant, with a VAS column = type of rating
df_VAS <- reshape2::melt(df, measure.vars= c("VAScold", "VASwarm","VASburn"),
id.vars=c("ID","trial_n","manipulation","order",
"trial_type","arm","condition","cold_location"),
variable.name = 'VAS', value.name = 'rating')
# import compiled data
df <- read.csv('STGI_compiled-data.csv')
# need to recode levels for cold_probe to reduce number of levels from 4 to 2
df$cold_location[df$cold_probe == 'distal'] <- 'dist_rostr'
df$cold_location[df$cold_probe == 'rostral'] <- 'dist_rostr'
df$cold_location[df$cold_probe == 'proximal'] <- 'prox_caud'
df$cold_location[df$cold_probe == 'caudal'] <- 'prox_caud'
df$cold_location <- as.factor(df$cold_location)
# reshape data so that there is one rating column per participant, with a VAS column = type of rating
df_VAS <- reshape2::melt(df, measure.vars= c("VAScold", "VASwarm","VASburn"),
id.vars=c("ID","trial_n","manipulation","order",
"trial_type","arm","condition","cold_location"),
variable.name = 'VAS', value.name = 'rating')
# rename the VAS ratings
df_VAS <- df_VAS %>%
mutate(VAS = revalue(VAS, c("VAScold" = "cold",
"VASwarm" = "warm",
"VASburn" = "burn")))
# to run zero inflated regressions need to make sure no values = 100, as cannot model them, so simply minus a very small fraction from those values
df_VAS$beta <- ifelse(df_VAS$rating==100, df_VAS$beta-0.0001, df_VAS$beta <- df_VAS$rating)
# transform variables into proportions (aka divide by 100), this makes the effect size estimates more logical
df_VAS$beta <- df_VAS$beta/100
df_VAS$ID <- factor(df_VAS$ID)
# Summarise beta per rating, per condition, per participant
# median
df_sum_pp <- aggregate(beta~ID*manipulation*condition*cold_location*VAS,
median, data = df_VAS)
# now summarise across participants
df_sum <- aggregate(beta~manipulation*condition*cold_location*VAS,
mean, data = df_sum_pp)
setnames(df_sum, "beta", "mean")
# standard deviation
df_sd <- aggregate(beta~manipulation*condition*cold_location*VAS,
SD, data = df_sum_pp)
setnames(df_sd, "beta", "std")
# merge
df_sum <- merge(df_sum, df_sd)
# creating individual data-frames for specific conditions (to make simulation easier)
cnt_cold <- df_sum[df_sum$manipulation == 'CNT' & df_sum$VAS == 'cold' ,]
cnt_warm <- df_sum[df_sum$manipulation == 'CNT' & df_sum$VAS == 'warm' ,]
cnt_burn <- df_sum[df_sum$manipulation == 'CNT' & df_sum$VAS == 'burn' ,]
tgi_cold <- df_sum[df_sum$manipulation == 'TGI' & df_sum$VAS == 'cold' ,]
tgi_warm <- df_sum[df_sum$manipulation == 'TGI' & df_sum$VAS == 'warm' ,]
tgi_burn <- df_sum[df_sum$manipulation == 'TGI' & df_sum$VAS == 'burn' ,]
View(df_sum)
simulate_subj <- function(subid, llim, ulim) {
# trial info
trialN = 12
conditionN = 8
ratingN = 3
# creating simulation data-frame
df <- data.frame(matrix(ncol = 0, nrow = trialN*conditionN*ratingN))
df$id <- rep(subid,trialN*conditionN*ratingN)
df$trialn <- rep(1:trialN,conditionN*ratingN)
df$dermatome <- rep(rep(c(rep("within",trialN*2), rep("across",trialN*2)),2),ratingN)
df$cold_location <- rep(rep(c(rep("dist_rostr",trialN), rep("prox_caud", trialN)),conditionN/2),ratingN)
df$stimuli <- rep(c(rep("tgi",trialN*conditionN/2), rep("non-tgi",trialN*conditionN/2)),ratingN)
df$quality <- c(rep("cold",trialN*conditionN), rep("warm",trialN*conditionN), rep("burn",trialN*conditionN))
# Simulate data here based on means and standard deviations of the above pilot sample
# Cold ratings: simulation
# tgi
w_dr_tgi_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_cold, condition == 'within' & cold_location == 'dist_rostr')[, 5],
sd=filter(tgi_cold, condition == 'within' & cold_location == 'dist_rostr')[, 6])
w_pc_tgi_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_cold, condition == 'within' & cold_location == 'prox_caud')[, 5],
sd=filter(tgi_cold, condition == 'within' & cold_location == 'prox_caud')[, 6])
a_dr_tgi_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_cold, condition == 'across' & cold_location == 'dist_rostr')[, 5],
sd=filter(tgi_cold, condition == 'across' & cold_location == 'dist_rostr')[, 6])
a_pc_tgi_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_cold, condition == 'across' & cold_location == 'prox_caud')[, 5],
sd=filter(tgi_cold, condition == 'across' & cold_location == 'prox_caud')[, 6])
# control
w_dr_cnt_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_cold, condition == 'within' & cold_location == 'dist_rostr')[, 5],
sd=filter(cnt_cold, condition == 'within' & cold_location == 'dist_rostr')[, 6])
w_pc_cnt_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_cold, condition == 'within' & cold_location == 'prox_caud')[, 5],
sd=filter(cnt_cold, condition == 'within' & cold_location == 'prox_caud')[, 6])
a_dr_cnt_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_cold, condition == 'across' & cold_location == 'dist_rostr')[, 5],
sd=filter(cnt_cold, condition == 'across' & cold_location == 'dist_rostr')[, 6])
a_pc_cnt_cold <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_cold, condition == 'across' & cold_location == 'prox_caud')[, 5],
sd=filter(cnt_cold, condition == 'across' & cold_location == 'prox_caud')[, 6])
# Warm ratings: simulation
# tgi
w_dr_tgi_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_warm, condition == 'within' & cold_location == 'dist_rostr')[, 5],
sd=filter(tgi_warm, condition == 'within' & cold_location == 'dist_rostr')[, 6])
w_pc_tgi_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_warm, condition == 'within' & cold_location == 'prox_caud')[, 5],
sd=filter(tgi_warm, condition == 'within' & cold_location == 'prox_caud')[, 6])
a_dr_tgi_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_warm, condition == 'across' & cold_location == 'dist_rostr')[, 5],
sd=filter(tgi_warm, condition == 'across' & cold_location == 'dist_rostr')[, 6])
a_pc_tgi_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_warm, condition == 'across' & cold_location == 'prox_caud')[, 5],
sd=filter(tgi_warm, condition == 'across' & cold_location == 'prox_caud')[, 6])
# control
w_dr_cnt_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_warm, condition == 'within' & cold_location == 'dist_rostr')[, 5],
sd=filter(cnt_warm, condition == 'within' & cold_location == 'dist_rostr')[, 6])
w_pc_cnt_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_warm, condition == 'within' & cold_location == 'prox_caud')[, 5],
sd=filter(cnt_warm, condition == 'within' & cold_location == 'prox_caud')[, 6])
a_dr_cnt_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_warm, condition == 'across' & cold_location == 'dist_rostr')[, 5],
sd=filter(cnt_warm, condition == 'across' & cold_location == 'dist_rostr')[, 6])
a_pc_cnt_warm <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_warm, condition == 'across' & cold_location == 'prox_caud')[, 5],
sd=filter(cnt_warm, condition == 'across' & cold_location == 'prox_caud')[, 6])
# Burning ratings: simulation
# tgi
w_dr_tgi_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_burn, condition == 'within' & cold_location == 'dist_rostr')[, 5],
sd=filter(tgi_burn, condition == 'within' & cold_location == 'dist_rostr')[, 6])
w_pc_tgi_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_burn, condition == 'within' & cold_location == 'prox_caud')[, 5],
sd=filter(tgi_burn, condition == 'within' & cold_location == 'prox_caud')[, 6])
a_dr_tgi_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_burn, condition == 'across' & cold_location == 'dist_rostr')[, 5],
sd=filter(tgi_burn, condition == 'across' & cold_location == 'dist_rostr')[, 6])
a_pc_tgi_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(tgi_burn, condition == 'across' & cold_location == 'prox_caud')[, 5],
sd=filter(tgi_burn, condition == 'across' & cold_location == 'prox_caud')[, 6])
# control
w_dr_cnt_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_burn, condition == 'within' & cold_location == 'dist_rostr')[, 5],
sd=filter(cnt_burn, condition == 'within' & cold_location == 'dist_rostr')[, 6])
w_pc_cnt_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_burn, condition == 'within' & cold_location == 'prox_caud')[, 5],
sd=filter(cnt_burn, condition == 'within' & cold_location == 'prox_caud')[, 6])
a_dr_cnt_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_burn, condition == 'across' & cold_location == 'dist_rostr')[, 5],
sd=filter(cnt_burn, condition == 'across' & cold_location == 'dist_rostr')[, 6])
a_pc_cnt_burn <-
truncnorm::rtruncnorm(
trialN, llim, ulim,
mean=filter(cnt_burn, condition == 'across' & cold_location == 'prox_caud')[, 5],
sd=filter(cnt_burn, condition == 'across' & cold_location == 'prox_caud')[, 6])
# creating rating variable
df$rating <- c(w_dr_tgi_cold, w_pc_tgi_cold, a_dr_tgi_cold, a_pc_tgi_cold,
w_dr_cnt_cold, w_pc_cnt_cold, a_dr_cnt_cold, a_pc_cnt_cold,
w_dr_tgi_warm, w_pc_tgi_warm, a_dr_tgi_warm, a_pc_tgi_warm,
w_dr_cnt_warm, w_pc_cnt_warm, a_dr_cnt_warm, a_pc_cnt_warm,
w_dr_tgi_burn, w_pc_tgi_burn, a_dr_tgi_burn, a_pc_tgi_burn,
w_dr_cnt_burn, w_pc_cnt_burn, a_dr_cnt_burn, a_pc_cnt_burn)
return(df)}
# First model cold VAS
model <- function(x, vas = c('cold','warm','burn')) {
if (vas[1] == 'cold'){
x1 <- x %>%  filter(quality == 'cold')
} else if (vas[1] == 'warm'){
} else if (vas[1] == 'burn') {
x1 <- x %>%  filter(quality == 'burn')
}
mod = glmmTMB::glmmTMB(
rating ~ stimuli + dermatome + cold_location + trialn + (1|id),
family = glmmTMB::beta_family(),
ziformula = ~1+stimuli,
data = x1,
na.action = na.omit)
return(summary(mod))}
# the warm model has the smallest effect size, so should extract power calculation for this model only
# do this for 40 participants, for 1000 simulations
nSims <- 1000
n <- 32 # number of participants to simulate
po <- data.frame()
for (i in 1:nSims){
# creating individual data-frames from simulated data
df_sim <- data.frame()
for (i in 1:n) {
df <- simulate_subj(i, 0, 1)
df_sim <- rbind(df_sim,df)
}
# then run the model based on simulated data
m <- model(df_sim, 'cold')
# extracting the p-value and effect size
tmp <- c(m$coefficients$cond[4,4], m$coefficients$cond[4,1])
po <- rbind(po,tmp)
}
View(m)
View(po)
length(po$sig)
# rename columns
names(po)[1] <- 'pval'
names(po)[2] <- 'eff'
po$sig <- as.numeric(po$pval < .05) #is significant
length(po$sig)
test <- po[!is.na(po$sig)]
test <- po[!is.na(po$sig) ,]
View(test)
po <- po[!is.na(po$sig)] #removing any NAs (models that did not converge) from the data frame
power <- sum(po$sig)/length(po$sig) # calculating power
po <- po[!is.na(po$sig) ,] #removing any NAs (models that did not converge) from the data frame
power <- sum(po$sig)/length(po$sig) # calculating power
# some renaming
po_c <- po
power_c <- power
power_c
summary(m)
View(m)
mod <- m
summary(m)
summary(mod)
m <- model(df_sim, 'cold')
summary(m)
m
m <- model(df_sim, 'cold')
m
x1
View(df_sim)
View(po)
mod = glmmTMB::glmmTMB(
rating ~ stimuli + dermatome + cold_location + trialn + (1|id),
family = glmmTMB::beta_family(),
ziformula = ~1+stimuli,
data = filter(df_sim, quality == 'cold'),
na.action = na.omit)
summary(mod)
