nrow = 3, ncol = 1,
labels = c('A','B','C'),
common.legend = TRUE) +
plot_annotation(title = main_title)
# then experiment 2
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'), include_zero = include_zero)
vas_meds = experiment2$vas_meds
h2_sum = experiment2$h2_sum
main_title = 'Experiment 2: warm thermode'
s_plotD = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'cold', title = 'Cold ratings') +
scale_colour_manual(values = c(blue[5], blue[7])) +
scale_fill_manual(values = c(blue[2], blue[4])) +
theme(title = element_text(size = 10))
s_plotE = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'warm', title = 'Warm ratings') +
scale_colour_manual(values = c(oran[5], oran[7])) +
scale_fill_manual(values = c(oran[2], oran[4])) +
theme(title = element_text(size = 10))
s_plotF = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'burn', title = 'Burning ratings') +
scale_colour_manual(values = c(purp[5], purp[7])) +
scale_fill_manual(values = c(purp[2], purp[4])) +
theme(title = element_text(size = 10))
s_plot_2 = ggarrange(s_plotD, s_plotE, s_plotF,
nrow = 3, ncol = 1,
labels = c('D','E','F'),
common.legend = TRUE) +
plot_annotation(title = main_title)
#compile the two experiments
s_plot_out = ggarrange(s_plot_1, s_plot_2,
nrow = 1, ncol = 2,
common.legend = TRUE,
legend.position = 'bottom')
s_plot_out
return(s_plot_out)
}
sPlot = function(include_zero = T){
# first experiment 1
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'), include_zero = include_zero)
vas_meds = experiment1$vas_meds
h2_sum = experiment1$h2_sum
main_title = 'Experiment 1: Cold thermode'
s_plotA = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'cold', title = 'Cold ratings') +
scale_colour_manual(values = c(blue[5], blue[7])) +
scale_fill_manual(values = c(blue[2], blue[4])) +
theme(title = element_text(size = 10))
s_plotB = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'warm', title = 'Warm ratings') +
scale_colour_manual(values = c(oran[5], oran[7])) +
scale_fill_manual(values = c(oran[2], oran[4])) +
theme(title = element_text(size = 10))
s_plotC = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'burn', title = 'Burning ratings') +
scale_colour_manual(values = c(purp[5], purp[7])) +
scale_fill_manual(values = c(purp[2], purp[4])) +
theme(title = element_text(size = 10))
s_plot_1 = ggarrange(s_plotA, s_plotB, s_plotC,
nrow = 3, ncol = 1,
labels = c('A','B','C'),
common.legend = TRUE) +
plot_annotation(title = main_title)
# then experiment 2
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'), include_zero = include_zero)
vas_meds = experiment2$vas_meds
h2_sum = experiment2$h2_sum
main_title = 'Experiment 2: warm thermode'
s_plotD = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'cold', title = 'Cold ratings') +
scale_colour_manual(values = c(blue[5], blue[7])) +
scale_fill_manual(values = c(blue[2], blue[4])) +
theme(title = element_text(size = 10))
s_plotE = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'warm', title = 'Warm ratings') +
scale_colour_manual(values = c(oran[5], oran[7])) +
scale_fill_manual(values = c(oran[2], oran[4])) +
theme(title = element_text(size = 10))
s_plotF = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'burn', title = 'Burning ratings') +
scale_colour_manual(values = c(purp[5], purp[7])) +
scale_fill_manual(values = c(purp[2], purp[4])) +
theme(title = element_text(size = 10))
s_plot_2 = ggarrange(s_plotD, s_plotE, s_plotF,
nrow = 3, ncol = 1,
labels = c('D','E','F'),
common.legend = TRUE) +
plot_annotation(title = main_title)
#compile the two experiments
s_plot_out = ggarrange(s_plot_1, s_plot_2,
nrow = 1, ncol = 2,
common.legend = TRUE,
legend.position = 'bottom')
s_plot_out
return(s_plot_out)
}
sPlot(include_zero = T)
sPlot = function(include_zero = T){
# first experiment 1
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'), include_zero = include_zero)
vas_meds = experiment1$vas_meds
h2_sum = experiment1$h2_sum
main_title = 'Experiment 1: Cold thermode'
s_plotA = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'cold', title = 'Cold ratings') +
scale_colour_manual(values = c(blue[5], blue[7])) +
scale_fill_manual(values = c(blue[2], blue[4])) +
theme(title = element_text(size = 10))
s_plotB = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'warm', title = 'Warm ratings') +
scale_colour_manual(values = c(oran[5], oran[7])) +
scale_fill_manual(values = c(oran[2], oran[4])) +
theme(title = element_text(size = 10))
s_plotC = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'burn', title = 'Burning ratings') +
scale_colour_manual(values = c(purp[5], purp[7])) +
scale_fill_manual(values = c(purp[2], purp[4])) +
theme(title = element_text(size = 10))
s_plot_1 = ggarrange(s_plotA, s_plotB, s_plotC,
nrow = 3, ncol = 1,
labels = c('A','B','C'),
common.legend = TRUE) +
plot_annotation(title = main_title)
# then experiment 2
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'), include_zero = include_zero)
vas_meds = experiment2$vas_meds
h2_sum = experiment2$h2_sum
main_title = 'Experiment 2: warm thermode'
s_plotD = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'cold', title = 'Cold ratings') +
scale_colour_manual(values = c(blue[5], blue[7])) +
scale_fill_manual(values = c(blue[2], blue[4])) +
theme(title = element_text(size = 10))
s_plotE = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'warm', title = 'Warm ratings') +
scale_colour_manual(values = c(oran[5], oran[7])) +
scale_fill_manual(values = c(oran[2], oran[4])) +
theme(title = element_text(size = 10))
s_plotF = make_sPlot(vas_meds = vas_meds, h2_sum = h2_sum,
VAS_type = 'burn', title = 'Burning ratings') +
scale_colour_manual(values = c(purp[5], purp[7])) +
scale_fill_manual(values = c(purp[2], purp[4])) +
theme(title = element_text(size = 10))
s_plot_2 = ggarrange(s_plotD, s_plotE, s_plotF,
nrow = 3, ncol = 1,
labels = c('D','E','F'),
common.legend = TRUE) +
plot_annotation(title = main_title)
#compile the two experiments
s_plot_out = ggarrange(s_plot_1, s_plot_2,
nrow = 1, ncol = 2,
common.legend = TRUE,
legend = 'bottom')
s_plot_out
return(s_plot_out)
}
sPlot(include_zero = T)
make_sPlot = function(vas_meds, h2_sum, VAS_type, title, l_pos){
# plot all data, with 0s
plot = ggplot(data = vas_meds %>%
filter(quality == VAS_type),
mapping = aes(x = xj, y = VAS, colour = manipulation, fill = manipulation)) +
geom_boxjitter(data = vas_meds %>%
filter(quality == VAS_type, cold_probe == 'proximal', manipulation == 'Non-TGI'),
position = position_nudge(x = -.1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == VAS_type, cold_probe == 'proximal', manipulation == 'TGI'),
position = position_nudge(x = .1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == VAS_type, cold_probe == 'distal', manipulation == 'Non-TGI'),
position = position_nudge(x = -.1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == VAS_type, cold_probe == 'distal', manipulation == 'TGI'),
position = position_nudge(x = .1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == VAS_type, cold_probe == 'rostral', manipulation == 'Non-TGI'),
position = position_nudge(x = -.1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == VAS_type, cold_probe == 'rostral', manipulation == 'TGI'),
position = position_nudge(x = .1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == VAS_type, cold_probe == 'caudal', manipulation == 'Non-TGI'),
position = position_nudge(x = -.1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_boxjitter(data = vas_meds %>%
filter(quality == VAS_type, cold_probe == 'caudal', manipulation == 'TGI'),
position = position_nudge(x = .1), width = .2,
errorbar.length = .2, jitter.shape = 21, jitter.size = 1.5,
outlier.shape = NA, errorbar.draw = TRUE, lwd = 0.7) +
geom_line(data = h2_sum %>%
filter(quality == VAS_type, manipulation == 'Non-TGI'),
aes(as.numeric(cold_code), VAS),
position = position_nudge(x = -.1)) +
geom_line(data = h2_sum %>%
filter(quality == VAS_type, manipulation == 'TGI'),
aes(as.numeric(cold_code), VAS),
position = position_nudge(x = .1)) +
scale_x_continuous(breaks = c(1,2,3,4), labels = c('proximal','distal','rostral','caudal')) +
labs(title = title, x = NULL,
y = 'VAS Rating (0-100)') +
ylim(-0.5,100) +
theme_classic() +
theme(panel.grid.minor = element_blank(), # text size for labels on the x-axis
strip.text = element_text(size = 10), # text size and color on facet_wrap
#strip.background =element_rect(fill=c(blue5[5],blue5[5])),
axis.text = element_text(size = axistext),
axis.title = element_text(size = axistitle),
legend.position = 'bottom',
#legend.background = element_rect(colour = "gray", fill = "white", linetype="solid"),
legend.text = element_text(size = legend),
legend.title = element_text(size = legend)) +
guides(color = FALSE)  +
scale_x_continuous(breaks = c(44,38,32), labels=c("High", "Medium", "Low"), ) +#, limits = c(44,38,32)) +
ylim(0,60)
p1 <- annotate_figure(p1, top = text_grob('A. Effect of Contrast on PHS',
size = 11, face = 'bold'))
p1
ggsave(here::here("figures", "F2_panel1.png"), plot = p1,
device = NULL, width = 8, height = 5, dpi = 600)
plot_df <- df %>%
mutate(baseline = replace(baseline, baseline == 32, 1)) %>%
mutate(baseline = replace(baseline, baseline == 38, 2)) %>%
mutate(baseline = replace(baseline, baseline == 44, 3))
# Rename instruction
plot_df[which(plot_df$instruction == "detect"), ]$instruction <- "Innocuous"
plot_df[which(plot_df$instruction == "pain"), ]$instruction <- "Noxious"
# Jitter
plot_df$xj <- jitter(plot_df$baseline, amount = .05)
# for this plot, remove trials that are 0 or < 0, for illustrative purposes
plot_df <- plot_df %>%
dplyr::filter(threshold > 0.1)
# Define total number of participants
N = length(unique(df$subject))
# Define summary stats to compute
my_funcs <- list(
mean = mean,
median = median,
sd = sd,
stderr = function(x) sd(x)/sqrt(N),
ci_upper = function(x) CI(x, ci = 0.95)[1],
ci_mean = function(x) CI(x, ci = 0.95)[2],
ci_lower = function(x) CI(x, ci = 0.95)[3])
# Get group-level summary stats
tsl2_group_stats <- plot_df %>%
group_by(baseline, instruction) %>%
dplyr::reframe(across(threshold, my_funcs)) %>%
dplyr::rename(mean = threshold_mean,
median = threshold_median,
sd = threshold_sd,
stderr = threshold_stderr,
ci_upper = threshold_ci_upper,
ci_lower = threshold_ci_lower,
ci_mean = threshold_ci_mean) %>%
mutate(ci_diff = ci_upper - ci_lower,
ci = ci_upper - ci_mean)
tsl2_group_stats
# Recode baseline in group-level summary
tsl2_group_stats <- tsl2_group_stats %>%
mutate(baseline = replace(baseline, baseline == 32, 1)) %>%
mutate(baseline = replace(baseline, baseline == 38, 2)) %>%
mutate(baseline = replace(baseline, baseline == 44, 3))
# Rename instruction
tsl2_group_stats[which(tsl2_group_stats$instruction == "detect"), ]$instruction <- "Innocuous"
tsl2_group_stats[which(tsl2_group_stats$instruction == "pain"), ]$instruction <- "Noxious"
# Plot 2
p3 <- ggplot(data = plot_df,
mapping = aes(x = baseline, y = threshold,
group = instruction, colour = instruction, fill = instruction)) +
# Add individual points
geom_point(aes(x = xj), shape = 21, size = .8, alpha = .6,
position = position_nudge(x = nudge3)) +
facet_wrap(~instruction, scales = 'free') +
geom_boxplot(
data = plot_df %>%
dplyr::filter(baseline == 1), outlier.color = NA,
position = position_nudge(x = nudge4),
width = .18,  notch = TRUE, lwd = .5, fatten = 1) +
geom_boxplot(
data = plot_df %>%
dplyr::filter(baseline == 2), outlier.color = NA,
position = position_nudge(x = nudge4),
width = .18,  notch = TRUE, lwd = .5, fatten = 1) +
geom_boxplot(
data = plot_df %>%
dplyr::filter(baseline == 3), outlier.color = NA,
position = position_nudge(x = nudge4),
width = .18,  notch = TRUE, lwd = .5, fatten = 1) +
# Add a line connecting the two means (Innocuous TSL)
geom_line(data = tsl2_group_stats,
aes(x = c(baseline + nudge4), y = median), size = .5) +
# Define additional settings
scale_x_continuous(breaks = c(1, 2, 3), labels=c("Low", "Medium", "High"), ) +
scale_colour_manual(labels = c("Innocuous", "Noxious"), values=c(blues9[7],blues9[8])) +
scale_fill_manual(labels = c("Innocuous", "Noxious"), values=c(blues9[2],blues9[3])) +
labs(y = "TSL Threshold (ºC)", x = NULL) +
theme_classic() +
theme(legend.position = "none",
panel.grid.minor = element_blank(), # text size for labels on the x-axis
strip.text = element_text(size = 10), # text size and color on facet_wrap
axis.text = element_text(size = axistext),
axis.title = element_text(size = axistitle),
legend.text = element_text(size = legend),
legend.title = element_blank()) # remove legend
# add title
p3 <- annotate_figure(p3, top = text_grob('B. Individual TSL Thresholds',
size = 11, face = 'bold'))
p3
#ggsave('Thresholds.png', p2, path = Apath, device = NULL, width = 7, height = 4.5, dpi = 1000)
ggsave(here::here("figures", "F2_panel2.png"), plot = p3,
device = NULL, width = 8, height = 5, dpi = 600)
# calculate and add pain contrast into summary
pain_con <- con_cond %>%
dplyr::filter(instruction == 'pain') %>%
dplyr::rename(TCFpain = TCF,
threshold_pain = threshold) %>%
dplyr::select(c(subject,baseline,threshold_pain,TCFpain))
detect_con <- con_cond %>%
dplyr::filter(instruction == 'detect') %>%
dplyr::rename(TCFdetect = TCF,
threshold_detect = threshold)
plot_con <- merge(detect_con, pain_con, by = c('subject','baseline'))
# Recode baseline
plot_con <- plot_con %>%
mutate(baseline = replace(baseline, baseline == 32, 1)) %>%
mutate(baseline = replace(baseline, baseline == 38, 2)) %>%
mutate(baseline = replace(baseline, baseline == 44, 3)) %>%
select(-c(instruction)) %>%
# lengthen data-frame by TCF to facet wrap
pivot_longer(cols = c(TCFdetect, TCFpain), names_to = 'instruction', values_to = 'TCF')
# instruction names
plot_con[which(plot_con$instruction == "TCFdetect"), ]$instruction <- "Innocuous"
plot_con[which(plot_con$instruction == "TCFpain"), ]$instruction <- "Noxious"
# Jitter
plot_con$xj <- jitter(plot_con$baseline, amount = .04)
plot_con$phs_01 <- as.factor(plot_con$phs_01)
#plot_con$baseline <- as.numeric(as.character(plot_con$baseline))
# Get group-level summary stats
con_group_stats <- plot_con %>%
group_by(baseline, instruction, phs_01) %>%
dplyr::reframe(across(TCF, my_funcs)) %>%
dplyr::rename(mean = TCF_mean,
median = TCF_median,
sd = TCF_sd,
stderr = TCF_stderr,
ci_upper = TCF_ci_upper,
ci_lower = TCF_ci_lower,
ci_mean = TCF_ci_mean) %>%
mutate(ci_diff = ci_upper - ci_lower,
ci = ci_upper - ci_mean)
con_group_stats
# function for making labels 1dp
scaleFUN <- function(x) sprintf("%.1f", x)
p4 <- ggplot(data = plot_con,
mapping = aes(x = baseline,
y = TCF,
group = as.factor(phs_01),
fill = as.factor(phs_01),
colour = as.factor(phs_01),
alpha = as.factor(instruction))) +
facet_wrap(~instruction, scales = 'free') +
geom_boxplot(
data = plot_con %>%
filter(baseline == 1),
position = position_dodge(.5), width = .28, notch = TRUE,
lwd = .4, fatten = .8, outlier.shape = 21, outlier.size = .7) +
geom_boxplot(
data = plot_con %>%
filter(baseline == 2),
position = position_dodge(.5), width = .28, notch = TRUE,
lwd = .4, fatten = .8, outlier.shape = 21, outlier.size = .7) +
geom_boxplot(
data = plot_con %>%
filter(baseline == 3),
position = position_dodge(.5), width = .28, notch = TRUE,
lwd = .4, fatten = .8, outlier.shape = 21, outlier.size = .7) +
scale_fill_manual(labels = c("No PHS", "PHS"), values=c(blues9[3],orans9[3])) +
scale_colour_manual(labels = c("No PHS", "PHS"), values=c(blues9[7],orans9[7])) +
scale_alpha_manual(values = c(.5,.9), guide = 'none') +
# Define additional settings
scale_x_continuous(breaks=c(1,2,3), labels = c('Low','Medium','High')) +
scale_y_continuous(labels=scaleFUN) +
labs(y = "Contrast (Tmax - Tmin/50)",
x = "Contrast Condition") +
#ylim(0,0.55) +
theme_classic() +
theme(legend.position = 'bottom',
legend.title = element_blank(),
panel.grid.minor = element_blank(), # text size for labels on the x-axis
strip.text = element_text(size = 10), # text size and color on facet_wrap
plot.title = element_text(hjust = 0.5, size = title),
axis.text = element_text(size = axistext),
axis.title = element_text(size = axistitle),
legend.text = element_text(size = legend)
)
# add title
p4 <- annotate_figure(p4, top = text_grob('C. Thermal Contrast by PHS',
size = 11, face = 'bold'))
p4
ggsave(here::here("figures", "F2_panel3.png"), plot = p4,
device = NULL, width = 9, height = 5, dpi = 600)
# setting placement of figures
F2 <- ggarrange(p1, NA, p3, NA, p4,
ncol = 1, nrow = 5,
heights = c(.95,.07,.78,.07,1))
F2
ggsave(file.path("figures", "Figure2.png"),
plot = F2, device = NULL, width = 3.5, height = 9, dpi = 600)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
## Loading libraries
# check for pacman package and install if not found
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson
)
# paths
datPath <- '/Users/au706616/Documents/Experiments/SPINALTGI/exp1/Raw/'
anaPath <- '/Users/au706616/Documents/Experiments/SPINALTGI/exp1/Analysis/'
# Extract all .csv files and compile
filenames <- dir(datPath, recursive = TRUE, full.names = FALSE, pattern = '.csv')
# empty dataframes for data
## with new data trials file will have changed to include temperature coding!
df_trials <- read.csv(text='procedure,trial_type,arm,condition,dermatome,order,cold_probe,trial_n,coolTemp,warmTempID,manipulation')
df_VAS <- read.csv(text='VASinit,VASburn,VASwarm,VAScold,trial_n,ID,manipulation')
df_RT <- read.csv(text='RTinit,RTburn,RTwarm,RTcold,trial_n,ID,manipulation')
## Data compiling
# trial files
setwd(datPath)
for (file in filenames){
# trial files
if (isTRUE(substr(basename(file), 24, 24)=="t")){
tmp <- read.csv(file)
tmp$ID <- substr(basename(file), 4, 6)
tmp$manipulation <- substr(basename(file), 17, 19)
df_trials <- rbind(df_trials, tmp)
}
# VAS response files
if (isTRUE(substr(basename(file), 24, 29)=="rating")){
tmp <- read.csv(file, header = FALSE)
colnames(tmp) <- c('VASinit','VASburn','VASwarm','VAScold','trial_n')
tmp$ID <- substr(basename(file), 4, 6)
tmp$manipulation <- substr(basename(file), 17, 19)
df_VAS <- rbind(df_VAS, tmp)
}
# VAS RT files
if (isTRUE(substr(basename(file), 24, 29)=="respti")){
tmp <- read.csv(file, header = FALSE)
colnames(tmp) <- c('RTinit','RTburn','RTwarm','RTcold','trial_n')
tmp$ID <- substr(basename(file), 4, 6)
tmp$manipulation <- substr(basename(file), 17, 19)
df_RT <- rbind(df_RT, tmp)
}
}
# merge all files
df_res <- merge(df_trials, df_VAS, by = c('ID','trial_n','manipulation'))
df_res <- merge(df_res, df_RT, by = c('ID','trial_n','manipulation'))
# remove participant 019, stopped testing halfway due to broken thermal probe
df_res <- df_res[df_res$ID != '019' ,]
# transform the ID of participants to remove 0
df_res$ID <- as.numeric(df_res$ID)
# recode conditions
df_res <- df_res %>%
mutate(condition = dplyr::recode(condition, '1' = 'within', '2' = 'across'),
cold_probe = dplyr::recode(cold_probe, 'C6' = 'rostral', 'T1' = 'caudal',
'dist' = 'distal', 'prox' = 'proximal'))
# change levels
df_res$cold_probe <- factor(df_res$cold_probe,
levels = c("caudal", "rostral", "distal", "proximal"))
# incorporate demographics
# the warm and cold TGI and CNT temperatures did not code properly on the trial .csv
# have saved these in the demo .csv as well, so will add these in
demoFile <- 'STGI_exp1_participant-demographics.csv'
fileName = paste(datPath, demoFile, sep = '')
df_demo <- read.csv(fileName)
# merge
df_res <- merge(df_res, df_demo)
# save new data-frame
fileName = paste(anaPath, 'STGI_exp1_compiled-data.csv', sep = '')
write.csv(df_res, fileName, row.names = FALSE)
# check we have 40 participants with 96 trials
id_check <- count(df_res, ID)
# check we have 40 participants with 96 trials
id_check <- count(df_res, 'ID')
id_check
View(df_res)
df_res <- df_res %>%
select(-c(warmT, coldT, Tested, Calibration, Notes))
# save new data-frame
fileName = paste(anaPath, 'STGI_exp1_compiled-data.csv', sep = '')
getwd()
setwd('/Users/au706616/Documents/Git/tgi-spinal')
getwd()
# save new data-frame
write.csv(df_res, file.path("data", "STGI_exp1_compiled-data.csv"), row.names = FALSE)
setwd('/Users/au706616/Documents/Git/tgi-spinal/')
# save new data-frame
write.csv(df_res, file.path("data", "STGI_exp1_compiled-data.csv"), row.names = FALSE)
