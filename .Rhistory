h2diff_plot
ggsave(here::here("figures", "E1_H2_difference.png"), plot = h2diff_plot,
device = NULL, width = 9, height = 5, dpi = 600)
set.seed(1234)  # Make everything reproducible
# Define the goodness-of-fit stats to include in modelsummary()
gof_stuff <- tribble(
~raw, ~clean, ~fmt,
"nobs", "N", 0,
"r.squared", "RÂ²", 3
)
# recode cold_location and condition to reduce levels in regression
df_long$cold_cond[df_long$cold_probe == 'distal'] <- 'dist_rostr'
df_long$cold_cond[df_long$cold_probe == 'rostral'] <- 'dist_rostr'
df_long$cold_cond[df_long$cold_probe == 'proximal'] <- 'prox_caud'
df_long$cold_cond[df_long$cold_probe == 'caudal'] <- 'prox_caud'
# to run zero inflated regressions need to make sure no values = 100,
# as cannot model them, so simply minus a very small fraction from those values
df_long$beta <- ifelse(df_long$VAS==100, df_long$beta-0.0001, df_long$beta <- df_long$VAS)
df_long$beta <- df_long$beta/100
# transform variables into proportions (aka divide by 100), this makes the effect size estimates more logical
#df_long$VAS <- df_long$VAS/100
df_long$ID <- factor(df_long$ID)
# Try and model all with ratings
model.cold = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long %>% filter(quality == 'cold'),
na.action = na.omit)
mc <- summary(model.cold)
mc
Anova(model.cold)
# get Rsq with the mumin package
cold_eff <- ggeffects::ggpredict(model.cold, terms = c('cold_cond', 'manipulation', 'condition'),
ci.lvl = .95)
# changing labels for plotting
cold_eff$group <- factor(cold_eff$group, labels = c('Non-TGI', 'TGI'))
cold_eff <- cold_eff %>%
mutate(label =
case_when(facet == 'across' & x == 'prox_caud' ~ 'caudal',
facet == 'across' & x == 'dist_rostr' ~ 'rostral',
facet == 'within' & x == 'prox_caud' ~ 'proximal',
facet == 'within' & x == 'dist_rostr' ~ 'distal',)
)
cold_eff$label = factor(cold_eff$label, levels = c('proximal','distal','caudal','rostral'))
# plotting - within
ggplot(data = cold_eff %>%
filter(facet == 'within'),
aes(label, predicted, group = group, colour = group),) +
geom_point(position = position_dodge(.3), size = 2.5) +
geom_line(position = position_dodge(.3), size = 1) +
geom_errorbar(aes(label, ymin = conf.low, ymax = conf.high),
position = position_dodge(.3), width = .1, size = .8) +
ylim(0, 0.5) +
labs(x = NULL, y = 'Predicted Cold Rating (0 - 1)') +
facet_wrap(~facet) +
scale_colour_manual(values = c(blue[4], blue[7])) +
theme_classic() +
theme(legend.title = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11)) -> plot_coldw_eff
# plotting - across
ggplot(data = cold_eff %>%
filter(facet == 'across'),
aes(label, predicted, group = group, colour = group),) +
geom_point(position = position_dodge(.3), size = 2.5) +
geom_line(position = position_dodge(.3), size = 1) +
geom_errorbar(aes(label, ymin = conf.low, ymax = conf.high),
position = position_dodge(.3), width = .1, size = .8) +
ylim(0, 0.5) +
labs(x = NULL, y = '') +
facet_wrap(~facet) +
scale_colour_manual(values = c(blue[4], blue[7])) +
theme_classic() +
theme(legend.title = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 10)) -> plot_colda_eff
# combine
plot_cold_eff1 <- ggarrange(plot_coldw_eff, plot_colda_eff,
ncol = 2, nrow = 1,
common.legend = TRUE,
legend = 'right')
plot_cold_eff1
# Try and model all with ratings
model.warm = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long %>% filter(quality == 'warm'),
na.action = na.omit)
mw <- summary(model.warm)
mw
Anova(model.warm)
# save results
warm_eff <- ggeffects::ggpredict(model.warm, terms = c('cold_cond', 'manipulation', 'condition'),
ci.lvl = .95)
# changing labels for plotting
warm_eff$group <- factor(warm_eff$group, labels = c('Non-TGI', 'TGI'))
warm_eff <- warm_eff %>%
mutate(label =
case_when(facet == 'across' & x == 'prox_caud' ~ 'caudal',
facet == 'across' & x == 'dist_rostr' ~ 'rostral',
facet == 'within' & x == 'prox_caud' ~ 'proximal',
facet == 'within' & x == 'dist_rostr' ~ 'distal',)
)
warm_eff$label = factor(warm_eff$label, levels = c('proximal','distal','caudal','rostral'))
# plotting - within
ggplot(data = warm_eff %>%
filter(facet == 'within'),
aes(label, predicted, group = group, colour = group),) +
geom_point(position = position_dodge(.3), size = 2.5) +
geom_line(position = position_dodge(.3), size = 1) +
geom_errorbar(aes(label, ymin = conf.low, ymax = conf.high),
position = position_dodge(.3), width = .1, size = .8) +
ylim(0, 0.5) +
labs(x = NULL, y = 'Predicted Warm Rating (0 - 1)') +
facet_wrap(~facet) +
scale_colour_manual(values = c(oran[4], oran[7])) +
theme_classic() +
theme(legend.title = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11)) -> plot_warmw_eff
# plotting - across
ggplot(data = warm_eff %>%
filter(facet == 'across'),
aes(label, predicted, group = group, colour = group),) +
geom_point(position = position_dodge(.3), size = 2.5) +
geom_line(position = position_dodge(.3), size = 1) +
geom_errorbar(aes(label, ymin = conf.low, ymax = conf.high),
position = position_dodge(.3), width = .1, size = .8) +
ylim(0, 0.5) +
labs(x = NULL, y = '') +
facet_wrap(~facet) +
scale_colour_manual(values = c(oran[4], oran[7])) +
theme_classic() +
theme(legend.title = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 10)) -> plot_warma_eff
# combine
plot_warm_eff1 <- ggarrange(plot_warmw_eff, plot_warma_eff,
ncol = 2, nrow = 1,
common.legend = TRUE,
legend = 'right')
plot_warm_eff1
# First, remove non-responders
df_resp <- df_long %>%
filter(responder == 1)
# check n
n <- count(df_resp, 'ID')
length(n$ID)
# Try and model all with ratings
model.burn = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_resp %>% filter(quality == 'burn'),
na.action = na.omit)
mb <- summary(model.burn)
mb
Anova(model.burn)
burn_eff <- ggeffects::ggpredict(model.burn, terms = c('cold_cond', 'manipulation', 'condition'),
ci.lvl = .95)
# changing labels for plotting
burn_eff$group <- factor(burn_eff$group, labels = c('Non-TGI', 'TGI'))
burn_eff <- burn_eff %>%
mutate(label =
case_when(facet == 'across' & x == 'prox_caud' ~ 'caudal',
facet == 'across' & x == 'dist_rostr' ~ 'rostral',
facet == 'within' & x == 'prox_caud' ~ 'proximal',
facet == 'within' & x == 'dist_rostr' ~ 'distal',)
)
burn_eff$label = factor(burn_eff$label, levels = c('proximal','distal','caudal','rostral'))
# plotting - within
ggplot(data = burn_eff %>%
filter(facet == 'within'),
aes(label, predicted, group = group, colour = group),) +
geom_point(position = position_dodge(.3), size = 2.5) +
geom_line(position = position_dodge(.3), size = 1) +
geom_errorbar(aes(label, ymin = conf.low, ymax = conf.high),
position = position_dodge(.3), width = .1, size = .8) +
ylim(0, 0.5) +
labs(x = NULL, y = 'Predicted Burn Rating (0 - 1)') +
facet_wrap(~facet) +
scale_colour_manual(values = c(purp[4], purp[7])) +
theme_classic() +
theme(legend.title = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11)) -> plot_burnw_eff
# plotting - across
ggplot(data = burn_eff %>%
filter(facet == 'across'),
aes(label, predicted, group = group, colour = group),) +
geom_point(position = position_dodge(.3), size = 2.5) +
geom_line(position = position_dodge(.3), size = 1) +
geom_errorbar(aes(label, ymin = conf.low, ymax = conf.high),
position = position_dodge(.3), width = .1, size = .8) +
ylim(0, 0.5) +
labs(x = NULL, y = '') +
facet_wrap(~facet) +
scale_colour_manual(values = c(purp[4], purp[7])) +
theme_classic() +
theme(legend.title = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 10)) -> plot_burna_eff
# combine
plot_burn_eff1 <- ggarrange(plot_burnw_eff, plot_burna_eff,
ncol = 2, nrow = 1,
common.legend = TRUE,
legend = 'right')
plot_burn_eff1
# Getting the marginal effects for plotting
# First the zeros - create new lm mo
df_long$bin <- ifelse(df_long$VAS == 0, 1, 0)
df_resp$bin <- ifelse(df_resp$VAS == 0, 1, 0)
# model for each VAS
# cold
cold.zeff <- glm(bin~1+manipulation,
family = binomial(link = 'logit'),
data = df_long %>% filter(quality == 'cold'))
summary(cold.zeff)
# warm
warm.zeff <- glm(bin~1+manipulation,
family = binomial(link = 'logit'),
data = df_long %>% filter(quality == 'warm'))
summary(warm.zeff)
# burn
burn.zeff <- glm(bin~1+manipulation,
family = binomial(link = 'logit'),
data = df_resp %>% filter(quality == 'burn'))
summary(burn.zeff)
# Data-frames
cold_zeff <- ggeffects::ggeffect(cold.zeff, terms = c('manipulation'))
warm_zeff <- ggeffects::ggeffect(warm.zeff, terms = c('manipulation'))
burn_zeff <- ggeffects::ggeffect(burn.zeff, terms = c('manipulation'))
# changing labels for plotting
cold_zeff$x <- factor(cold_zeff$x, labels = c('Non-TGI', 'TGI'))
warm_zeff$x <- factor(warm_zeff$x, labels = c('Non-TGI', 'TGI'))
burn_zeff$x <- factor(burn_zeff$x, labels = c('Non-TGI', 'TGI'))
# plotting - cold
ggplot(cold_zeff, aes(x, predicted, colour = x)) +
geom_point(size = 2.5) +
geom_errorbar(aes(x, ymin = conf.low, ymax = conf.high),
width = .05, size = .8) +
labs(y = 'Predicted proportion of zeros', x = NULL) +
ylim(0,.25) +
scale_colour_manual(values = c(blue[4], blue[7])) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)) -> plot_zcold
# warm
ggplot(warm_zeff, aes(x, predicted, colour = x)) +
geom_point(size = 2.5) +
geom_errorbar(aes(x, ymin = conf.low, ymax = conf.high),
width = .05, size = .8) +
labs(y = 'Predicted proportion of zeros', x = NULL) +
ylim(.45,.7) +
scale_colour_manual(values = c(oran[4], oran[7])) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)) -> plot_zwarm
# burn
ggplot(burn_zeff, aes(x, predicted, colour = x)) +
geom_point(size = 2.5) +
geom_errorbar(aes(x, ymin = conf.low, ymax = conf.high),
width = .05, size = .8) +
labs(y = 'Predicted proportion of zeros', x = NULL) +
ylim(.05,.3) +
scale_colour_manual(values = c(purp[4], purp[7])) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)) -> plot_zburn
# Cold
plot_cold_eff <- ggarrange(plot_zcold, plot_cold_eff1,
ncol = 2, nrow = 1,
widths = c(.35,1))
# add title
plot_cold_eff <- annotate_figure(plot_cold_eff, top = text_grob("Cold Ratings",
size = 12, hjust = 4.05))
plot_cold_eff
# Warm
plot_warm_eff <- ggarrange(plot_zwarm, plot_warm_eff1,
ncol = 2, nrow = 1,
widths = c(.35,1))
# add title
plot_warm_eff <- annotate_figure(plot_warm_eff, top = text_grob("Warm Ratings",
size = 12, hjust = 3.69))
plot_warm_eff
# Burn
plot_burn_eff <- ggarrange(plot_zburn, plot_burn_eff1,
ncol = 2, nrow = 1,
widths = c(.35,1))
# add title
plot_burn_eff <- annotate_figure(plot_burn_eff, top = text_grob("Burn Ratings",
size = 12, hjust = 4.1))
plot_burn_eff
# Compile all!
plot_eff <- ggarrange(plot_cold_eff, plot_warm_eff, plot_burn_eff,
ncol = 1, nrow = 3)
plot_eff
ggsave(here::here("figures", "E1_marginalEffects.png"), plot = plot_eff,
device = NULL, width = 9, height = 5, dpi = 600)
# cold assumption - on n = 50
mc.assump <- simulateResiduals(model.cold, n = 1000)
plot(mc.assump)
# warm assumption - on n = 50
mw.assump <- simulateResiduals(model.warm, n = 1000)
plot(mw.assump)
# warm assumption - on n = 50
mb.assump <- simulateResiduals(model.burn, n = 1000)
plot(mb.assump)
# remove columns
df_corr <- df_res[, c(1:9,14:16,21)]
df_corr <- df_corr %>%
pivot_wider(names_from = 'manipulation', values_from = c('VAScold','VASwarm','VASburn')) %>%
select(c(ID,VAScold_CNT,VAScold_TGI,VASwarm_CNT,VASwarm_TGI,VASburn_CNT,VASburn_TGI)) %>%
rename(CNTcold = VAScold_CNT,
TGIcold = VAScold_TGI,
CNTwarm = VASwarm_CNT,
TGIwarm = VASwarm_TGI,
CNTburn = VASburn_CNT,
TGIburn = VASburn_TGI)
# average values within participants
df_corr <- aggregate(. ~ID, mean, data = df_corr)
# remove ID
df_corr <- select(df_corr, -ID)
# check distribution of data
df_means <- aggregate(VAS ~ ID*quality*manipulation, mean, data = vas_meds)
ggplot(df_means, aes(colour = quality)) +
geom_density(aes(VAS)) +
theme_bw()
# correlate
qual_cor <- hetcor(df_corr, type = 'spearman')
cormat <- qual_cor$correlations
# significance values
p <- cor.mtest(df_corr, type ='spearman')$p
# correlation matrix
# plotting correlations between variables
corrplot(cormat, type = 'lower',
p.mat = p, insig = "p-value", sig.level = -1,
title = "VAS rating correlation matrix",
mar = c(0,0,1,0),
tl.cex=0.9)
# Non TGI plots
ggplot(df_corr, aes(x = CNTcold, y =CNTwarm)) +
geom_smooth(method='lm', colour = 'black', alpha = .5) +
geom_point(size = 1.5, shape = 21, colour = 'grey10', fill = 'grey60') +
geom_text(aes(label = paste0("R = ",
round(cormat[1,3], 2))),
x=78, y=91, size = 5) +
labs(x = 'Cold Ratings', y = 'Warm Ratings') +
xlim(0,100) + ylim(-10,100) +
theme_bw() +
theme(axis.title = element_text(size = 12)) -> CNT_cw_plot
ggplot(df_corr, aes(x = CNTcold, y = CNTburn)) +
geom_smooth(method='lm', colour = 'black', alpha = .5) +
geom_point(size = 1.5, shape = 21, colour = 'grey10', fill = 'grey60') +
geom_text(aes(label = paste0("R = ",
round(cormat[1,5], 2))),
x=78, y=91, size = 5) +
labs(x = 'Cold Ratings', y = 'Burn Ratings') +
xlim(0,100) + ylim(-10,100) +
theme_bw() +
theme(axis.title = element_text(size = 12)) -> CNT_cb_plot
ggplot(df_corr, aes(x = CNTwarm, y = CNTburn)) +
geom_smooth(method='lm', colour = 'black', alpha = .5) +
geom_point(size = 1.5, shape = 21, colour = 'grey10', fill = 'grey60') +
geom_text(aes(label = paste0("R = ",
round(cormat[3,5], 2))),
x=78, y=91, size = 5) +
labs(x = 'Warm Ratings', y = 'Burn Ratings') +
xlim(0,100) + ylim(-10,100) +
theme_bw() +
theme(axis.title = element_text(size = 12)) -> CNT_wb_plot
# combine non TGI
CNT_corr_plot <- ggarrange(CNT_cw_plot, CNT_cb_plot, CNT_wb_plot,
nrow = 1, ncol = 3,
labels = c('A','B','C'))
CNT_corr_plot <- annotate_figure(CNT_corr_plot,
top = text_grob("Non-TGI",
size = 14))
# TGI plots
ggplot(df_corr, aes(x = TGIcold, y = TGIwarm)) +
geom_smooth(method='lm', colour = 'black', alpha = .5) +
geom_point(size = 1.5, shape = 21, colour = 'grey10', fill = 'grey60') +
geom_text(aes(label = paste0("R = ",
round(cormat[2,4], 2))),
x=78, y=91, size = 5) +
labs(x = 'Cold Ratings', y = 'Warm Ratings') +
xlim(0,100) + ylim(-10,100) +
theme_bw() +
theme(axis.title = element_text(size = 12)) -> TGI_cw_plot
ggplot(df_corr, aes(x = TGIcold, y = TGIburn)) +
geom_smooth(method='lm', colour = 'black', alpha = .5) +
geom_point(size = 1.5, shape = 21, colour = 'grey10', fill = 'grey60') +
geom_text(aes(label = paste0("R = ",
round(cormat[2,6], 2))),
x=78, y=91, size = 5) +
labs(x = 'Cold Ratings', y = 'Burn Ratings') +
xlim(0,100) + ylim(-10,100) +
theme_bw() +
theme(axis.title = element_text(size = 12)) -> TGI_cb_plot
ggplot(df_corr, aes(x = TGIwarm, y = TGIburn)) +
geom_smooth(method='lm', colour = 'black', alpha = .5) +
geom_point(size = 1.5, shape = 21, colour = 'grey10', fill = 'grey60') +
geom_text(aes(label = paste0("R = ",
round(cormat[4,6], 2))),
x=78, y=91, size = 5) +
labs(x = 'Warm Ratings', y = 'Burn Ratings') +
xlim(0,100) + ylim(-10,100) +
theme_bw() +
theme(axis.title = element_text(size = 12)) -> TGI_wb_plot
# combine TGI
TGI_corr_plot <- ggarrange(TGI_cw_plot, TGI_cb_plot, TGI_wb_plot,
nrow = 1, ncol = 3,
labels = c('D','E','F'))
TGI_corr_plot <- annotate_figure(TGI_corr_plot,
top = text_grob("TGI",
size = 14))
# put two together
corr_plot <- ggarrange(CNT_corr_plot, TGI_corr_plot,
nrow = 2, ncol = 1)
corr_plot
ggsave(here::here("figures", "E1_correlations.png"), plot = corr_plot,
device = NULL, width = 9, height = 5, dpi = 600)
# Try and model all with ratings
model.init = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long %>% filter(quality == 'init'),
na.action = na.omit)
mi <- summary(model.init)
mi
# seperate data-frames
within <- df_long %>%
filter(condition == 'within')
across <-  df_long %>%
filter(condition == 'across')
# within
model.wcold = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = within %>% filter(quality == 'cold'),
na.action = na.omit)
mwc <- summary(model.wcold)
mwc
# across
model.acold = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = across %>% filter(quality == 'cold'),
na.action = na.omit)
mac <- summary(model.acold)
mac
# within
model.wwarm = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = within %>% filter(quality == 'warm'),
na.action = na.omit)
mww <- summary(model.wwarm)
mww
# across
model.awarm = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = across %>% filter(quality == 'warm'),
na.action = na.omit)
maw <- summary(model.awarm)
maw
# isolate responders only
within <- df_long %>%
filter(condition == 'within' & responder == 1)
across <-  df_long %>%
filter(condition == 'across' & responder == 1)
# within
model.wburn = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = within %>% filter(quality == 'burn'),
na.action = na.omit)
mwb <- summary(model.wburn)
mwb
# across
model.aburn = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = across %>% filter(quality == 'burn'),
na.action = na.omit)
mab <- summary(model.aburn)
mab
