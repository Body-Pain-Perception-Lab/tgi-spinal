df_res
# Reorganise data-frame
# pivot longer the VAS response by each quality of sensation
# do this for both RT and VAS
df_long <- df_res %>%
pivot_longer(cols = c(VASinit, VASburn, VASwarm, VAScold),
names_to = 'quality',
values_to = 'VAS')
df_long2 <- df_res %>%
pivot_longer(cols = c(RTinit, RTburn, RTwarm, RTcold),
names_to = 'quality',
values_to = 'RT')
df_long
df_res
# Reorganise data-frame
# pivot longer the VAS response by each quality of sensation
# do this for both RT and VAS
df_long <- df_res %>%
pivot_longer(cols = c(VASinit, VASburn, VASwarm, VAScold),
names_to = 'quality',
values_to = 'VAS')
df_long
df_long$VAS
df_long2 <- df_res %>%
pivot_longer(cols = c(RTinit, RTburn, RTwarm, RTcold),
names_to = 'quality',
values_to = 'RT')
# remove the VAS & RT from quality column
df_long$quality <- substr(df_long$quality, 4, 7)
df_long2$quality <- substr(df_long2$quality, 3, 6)
df_long$quality
df_long2$quality
if (file.exists(file)){
df_res <- read.csv(file)
} else {
print('Data file does not exist, check data is in current directory.
If not, run tgi-compiler.Rmd')
}
# Calculate median burning rating for all participants
# TGI trials only
# Then flag how many are not sig > 0
df_med <- aggregate(VASburn~ID*manipulation*cold_probe*trial_type, median, data = df_res)
tgi <-  df_med %>%
filter(manipulation == 'TGI')
cnt <-  df_med %>%
filter(manipulation == 'CNT')
# identify test results where pvalue is < .05
tgi$ID <- as.factor(tgi$ID)
i = 0
test = data.frame(matrix(nrow = 40, ncol = 3))
colnames(test) <- c('ID','pval','responder')
for (id in levels(tgi$ID)){
i = i+1
tmp1 <- tgi[tgi$ID == id ,]
test$ID[i] <- id
test$pval[i] <- (t.test(tmp1$VASburn, mu = 0, alternative = 'greater'))$p.value
test$responder[i] <- isTRUE(test$pval[i] < .05)
}
# combine responder logic with main data-frame
test$responder <- ifelse(test$responder == TRUE, 1, 0)
test <- test[, c(1,3)]
df_res <- merge(df_res, test, by = 'ID')
# count the number of false responses
nNONRESP <- sum(test$responder == FALSE)
# print
print(paste0('Non responders: ', nNONRESP, '/', length(test$ID)))
if(!zero){
df_res = df_res %>% mutate(VASinit = ifelse(VASinit == 0, NA,VASinit),
VASburn = ifelse(VASburn == 0, NA,VASburn),
VASwarm = ifelse(VASwarm == 0, NA,VASwarm),
VAScold = ifelse(VAScold == 0, NA,VAScold))
}
# Reorganise data-frame
# pivot longer the VAS response by each quality of sensation
# do this for both RT and VAS
df_long <- df_res %>%
pivot_longer(cols = c(VASinit, VASburn, VASwarm, VAScold),
names_to = 'quality',
values_to = 'VAS')
df_long2 <- df_res %>%
pivot_longer(cols = c(RTinit, RTburn, RTwarm, RTcold),
names_to = 'quality',
values_to = 'RT')
# remove the VAS & RT from quality column
df_long$quality <- substr(df_long$quality, 4, 7)
df_long2$quality <- substr(df_long2$quality, 3, 6)
# remove columns from both then merge
df_long <- df_long %>%
select(-c(coolTemp, warmTemp, Order, Manipulation.first))
df_long2 <- df_long2 %>%
select(-c(coolTemp, warmTemp, Order, Manipulation.first))
df_long <- merge(df_long, df_long2)
df_long
# then remove NaNs
df_long <- df_long %>% filter(!is.na(VAS))
# remove the initial trials - not important for now
init_burn <- filter(df_long, quality == 'init')
all_vas <- filter(df_long, quality != 'init')
all_vas
# calculate means
vas_meds <- aggregate(VAS ~ quality*manipulation*condition*cold_probe*ID,
median, data = all_vas)
vas_meds
vas_h1 <- aggregate(VAS ~ quality*manipulation*condition*ID, mean, data = vas_meds)
vas_h1
# change name of manipulation
vas_h1$manipulation <- factor(vas_h1$manipulation,
labels = c('Non-TGI', 'TGI'))
# summary means for h1
h1_sum <- summarySEwithin(data = vas_h1, measurevar = 'VAS',
withinvars = c('manipulation', 'quality', 'condition'))
vas_h1 %>%
pivot_wider(names_from = condition, values_from = VAS) %>%
mutate(difference = within - across)
vas_h1 %>%
pivot_wider(names_from = condition, values_from = VAS)
df_res %>% filter(quality == "warm",manipulation == ")
)
str(df_res$manipulation)
vas_h1_diff <- vas_h1 %>%
pivot_wider(names_from = condition, values_from = VAS) %>% tidyr::replace_na() %>%
mutate(difference = within - across)
vas_h1_diff
?tidyr::replace_na()
vas_h1_diff <- vas_h1 %>%
pivot_wider(names_from = condition, values_from = VAS) %>% tidyr::replace_na(within) %>%
mutate(difference = within - across)
vas_h1_diff <- vas_h1 %>%
pivot_wider(names_from = condition, values_from = VAS) %>% tidyr::replace_na(list(within = 0, across = 0)) %>%
mutate(difference = within - across)
vas_h1_diff
# recode quality
vas_h1_diff$quality <- factor(vas_h1_diff$quality,
levels = c('cold', 'warm', 'burn'))
# summary statistics
h1_diff_sum <- summarySEwithin(data = vas_h1_diff, measurevar = 'difference',
withinvars = c('manipulation', 'quality'))
# Change name of manipulation
vas_meds$manipulation <- factor(vas_meds$manipulation, labels = c('Non-TGI', 'TGI'))
h2_sum <- aggregate(VAS~quality*manipulation*cold_probe, median, data = vas_meds)
# organise data for plotting
vas_meds$cold_probe <- factor(vas_meds$cold_probe, levels =
c('proximal', 'distal', 'rostral', 'caudal'))
h2_sum$cold_probe <- factor(h2_sum$cold_probe, levels =
c('proximal', 'distal', 'rostral', 'caudal'))
# recoding cold probe location so can jitter
vas_meds$cold_code <- factor(vas_meds$cold_probe, labels =
c(1,2,3,4))
h2_sum$cold_code <- factor(h2_sum$cold_probe, labels =
c(1,2,3,4))
# creating jitter
vas_meds$xj <- jitter(as.numeric(vas_meds$cold_code), amount = .05)
vas_meds
# recode cold_location and condition to reduce levels in regression
vas_meds$cold_cond[vas_meds$cold_probe == 'distal'] <- 'dist_rost'
vas_meds$cold_cond[vas_meds$cold_probe == 'rostral'] <- 'dist_rost'
vas_meds$cold_cond[vas_meds$cold_probe == 'proximal'] <- 'prox_caud'
vas_meds$cold_cond[vas_meds$cold_probe == 'caudal'] <- 'prox_caud'
# then pivot wider and calculate difference
vas_h2_diff <- vas_meds %>%
select(-c(cold_code, xj, cold_probe)) %>%
pivot_wider(id_cols = c(ID, quality, manipulation, condition),
names_from = cold_cond, values_from = VAS) %>%
mutate(difference = prox_caud - dist_rost)
vas_h2_diff
# recode quality
vas_h2_diff$quality <- factor(vas_h2_diff$quality,
levels = c('cold', 'warm', 'burn'))
# summary statistics
h2_diff_sum <- summarySEwithin(data = vas_h2_diff, measurevar = 'difference',
withinvars = c('manipulation', 'quality', 'condition'))
h2_diff_sum
vas_h2_diff
# summary statistics
h2_diff_sum <- summarySEwithin(data = vas_h2_diff, measurevar = 'difference',
withinvars = c('manipulation', 'quality', 'condition'))
h2_diff_sum
vas_h2_diff
View(vas_h1_diff)
if (file.exists(file)){
df_res <- read.csv(file)
} else {
print('Data file does not exist, check data is in current directory.
If not, run tgi-compiler.Rmd')
}
# Calculate median burning rating for all participants
# TGI trials only
# Then flag how many are not sig > 0
df_med <- aggregate(VASburn~ID*manipulation*cold_probe*trial_type, median, data = df_res)
tgi <-  df_med %>%
filter(manipulation == 'TGI')
cnt <-  df_med %>%
filter(manipulation == 'CNT')
# identify test results where pvalue is < .05
tgi$ID <- as.factor(tgi$ID)
i = 0
test = data.frame(matrix(nrow = 40, ncol = 3))
colnames(test) <- c('ID','pval','responder')
for (id in levels(tgi$ID)){
i = i+1
tmp1 <- tgi[tgi$ID == id ,]
test$ID[i] <- id
test$pval[i] <- (t.test(tmp1$VASburn, mu = 0, alternative = 'greater'))$p.value
test$responder[i] <- isTRUE(test$pval[i] < .05)
}
# combine responder logic with main data-frame
test$responder <- ifelse(test$responder == TRUE, 1, 0)
test <- test[, c(1,3)]
df_res <- merge(df_res, test, by = 'ID')
# count the number of false responses
nNONRESP <- sum(test$responder == FALSE)
# print
print(paste0('Non responders: ', nNONRESP, '/', length(test$ID)))
if(!zero){
df_res = df_res %>% mutate(VASinit = ifelse(VASinit == 0, NA,VASinit),
VASburn = ifelse(VASburn == 0, NA,VASburn),
VASwarm = ifelse(VASwarm == 0, NA,VASwarm),
VAScold = ifelse(VAScold == 0, NA,VAScold))
}
# Reorganise data-frame
# pivot longer the VAS response by each quality of sensation
# do this for both RT and VAS
df_long <- df_res %>%
pivot_longer(cols = c(VASinit, VASburn, VASwarm, VAScold),
names_to = 'quality',
values_to = 'VAS')
df_long2 <- df_res %>%
pivot_longer(cols = c(RTinit, RTburn, RTwarm, RTcold),
names_to = 'quality',
values_to = 'RT')
# remove the VAS & RT from quality column
df_long$quality <- substr(df_long$quality, 4, 7)
df_long2$quality <- substr(df_long2$quality, 3, 6)
# remove columns from both then merge
df_long <- df_long %>%
select(-c(coolTemp, warmTemp, Order, Manipulation.first))
df_long2 <- df_long2 %>%
select(-c(coolTemp, warmTemp, Order, Manipulation.first))
df_long <- merge(df_long, df_long2)
# then remove NaNs
df_long <- df_long %>% filter(!is.na(VAS))
# remove the initial trials - not important for now
init_burn <- filter(df_long, quality == 'init')
all_vas <- filter(df_long, quality != 'init')
# calculate means
vas_meds <- aggregate(VAS ~ quality*manipulation*condition*cold_probe*ID,
median, data = all_vas)
vas_h1 <- aggregate(VAS ~ quality*manipulation*condition*ID, mean, data = vas_meds)
# change name of manipulation
vas_h1$manipulation <- factor(vas_h1$manipulation,
labels = c('Non-TGI', 'TGI'))
# summary means for h1
h1_sum <- summarySEwithin(data = vas_h1, measurevar = 'VAS',
withinvars = c('manipulation', 'quality', 'condition'))
vas_h1_diff <- vas_h1 %>%
pivot_wider(names_from = condition, values_from = VAS) %>% tidyr::replace_na(list(within = 0, across = 0)) %>%
mutate(difference = within - across)
# recode quality
vas_h1_diff$quality <- factor(vas_h1_diff$quality,
levels = c('cold', 'warm', 'burn'))
# summary statistics
h1_diff_sum <- summarySEwithin(data = vas_h1_diff, measurevar = 'difference',
withinvars = c('manipulation', 'quality'))
# Change name of manipulation
vas_meds$manipulation <- factor(vas_meds$manipulation, labels = c('Non-TGI', 'TGI'))
vas_meds
h2_sum <- aggregate(VAS~quality*manipulation*cold_probe, median, data = vas_meds)
h2_sum
# organise data for plotting
vas_meds$cold_probe <- factor(vas_meds$cold_probe, levels =
c('proximal', 'distal', 'rostral', 'caudal'))
vas_meds
h2_sum$cold_probe <- factor(h2_sum$cold_probe, levels =
c('proximal', 'distal', 'rostral', 'caudal'))
h2_sum
# recoding cold probe location so can jitter
vas_meds$cold_code <- factor(vas_meds$cold_probe, labels =
c(1,2,3,4))
h2_sum$cold_code <- factor(h2_sum$cold_probe, labels =
c(1,2,3,4))
# creating jitter
vas_meds$xj <- jitter(as.numeric(vas_meds$cold_code), amount = .05)
# recode cold_location and condition to reduce levels in regression
vas_meds$cold_cond[vas_meds$cold_probe == 'distal'] <- 'dist_rost'
vas_meds$cold_cond[vas_meds$cold_probe == 'rostral'] <- 'dist_rost'
vas_meds$cold_cond[vas_meds$cold_probe == 'proximal'] <- 'prox_caud'
vas_meds$cold_cond[vas_meds$cold_probe == 'caudal'] <- 'prox_caud'
# then pivot wider and calculate difference
vas_h2_diff <- vas_meds %>%
select(-c(cold_code, xj, cold_probe)) %>%
pivot_wider(id_cols = c(ID, quality, manipulation, condition),
names_from = cold_cond, values_from = VAS) %>%
mutate(difference = prox_caud - dist_rost)
vas_h2_diff
View(vas_h2_diff)
# then pivot wider and calculate difference
vas_h2_diff <- vas_meds %>%
select(-c(cold_code, xj, cold_probe)) %>%
pivot_wider(id_cols = c(ID, quality, manipulation, condition),
names_from = cold_cond, values_from = VAS) %>% tidyr::replace_na(list(prox_caud = 0, dist_rost = 0)) %>%
mutate(difference = prox_caud - dist_rost)
vas_h2_diff
View(vas_h2_diff)
# recode quality
vas_h2_diff$quality <- factor(vas_h2_diff$quality,
levels = c('cold', 'warm', 'burn'))
# summary statistics
h2_diff_sum <- summarySEwithin(data = vas_h2_diff, measurevar = 'difference',
withinvars = c('manipulation', 'quality', 'condition'))
# recode cold_location and condition to reduce levels in regression
df_long$cold_cond[df_long$cold_probe == 'distal'] <- 'dist_rostr'
df_long$cold_cond[df_long$cold_probe == 'rostral'] <- 'dist_rostr'
df_long$cold_cond[df_long$cold_probe == 'proximal'] <- 'prox_caud'
df_long$cold_cond[df_long$cold_probe == 'caudal'] <- 'prox_caud'
# to run zero inflated regressions need to make sure no values = 100,
# as cannot model them, so simply minus a very small fraction from those values
df_long$beta <- ifelse(df_long$VAS==100, df_long$beta-0.0001, df_long$beta <- df_long$VAS)
df_long$beta <- df_long$beta/100
# transform variables into proportions (aka divide by 100), this makes the effect size estimates more logical
#df_long$VAS <- df_long$VAS/100
df_long$ID <- factor(df_long$ID)
df_long
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork, cowplot
)
source(here::here("scripts","utility.R"))
source(here::here("scripts","plots.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = F)
#save.image("~/tgi-spinal/Workspace/stats.RData")
list2env(stats, envir=environment())
ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
plot1(zero = F)
plot1(zero = T)
plot2()
plot2(zero = F)
plot2(zero = F)
plot2(zero = T)
plot2(zero = F)
plot2(zero = T)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork, cowplot
)
source(here::here("scripts","utility.R"))
source(here::here("scripts","plots.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = F)
#save.image("~/tgi-spinal/Workspace/stats.RData")
list2env(stats, envir=environment())
ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
plot1(zero = F)
plot1(zero = T)
plot2(zero = F)
plot2(zero = T)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork, cowplot
)
source(here::here("scripts","utility.R"))
source(here::here("scripts","plots.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = F)
#save.image("~/tgi-spinal/Workspace/stats.RData")
list2env(stats, envir=environment())
ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
plot1(include_zero = F)
#plot1(include_zero = T)
plot2(include_zero = F)
#plot2(include_zero = T)
plot2(include_zero = F)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork, cowplot
)
source(here::here("scripts","utility.R"))
source(here::here("scripts","plots.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = F)
#save.image("~/tgi-spinal/Workspace/stats.RData")
list2env(stats, envir=environment())
ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
plot1(include_zero = F)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork, cowplot
)
source(here::here("scripts","utility.R"))
source(here::here("scripts","plots.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = F)
#save.image("~/tgi-spinal/Workspace/stats.RData")
list2env(stats, envir=environment())
ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
plot1(include_zero = F)
#plot1(include_zero = T)
plot2(include_zero = F)
#plot2(include_zero = T)
plot2(include_zero = F)
#roudning
r = 2
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'))
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'))
df_long_exp1 = experiment1$df_long %>% mutate(cold_probe = as.factor(cold_probe), manipulation = as.factor(manipulation))
df_long_exp2 = experiment2$df_long %>% mutate(cold_probe = as.factor(cold_probe), manipulation = as.factor(manipulation))
## Define constrats such that we both get within / across (i.e. distal & proximal vs rostral & caudual)
levels(df_long_exp1$cold_probe)
#within - across
within_across = c(-1/2,1/2,1/2,-1/2)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork, cowplot
)
source(here::here("scripts","utility.R"))
source(here::here("scripts","plots.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = F)
#save.image("~/tgi-spinal/Workspace/stats.RData")
list2env(stats, envir=environment())
ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
plot1(include_zero = F)
#plot1(include_zero = T)
plot2(include_zero = F)
#plot2(include_zero = T)
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'))
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'))
df_long_exp1 = experiment1$df_long %>% mutate(cold_probe = as.factor(cold_probe), manipulation = as.factor(manipulation))
df_long_exp2 = experiment2$df_long %>% mutate(cold_probe = as.factor(cold_probe), manipulation = as.factor(manipulation))
## Define constrats such that we both get within / across (i.e. distal & proximal vs rostral & caudual)
levels(df_long_exp1$cold_probe)
# "caudal"   "distal"   "proximal" "rostral"
#within - across
within_across = c(-1/2,1/2,1/2,-1/2)
#caudal - rostral
caudal_rostral = c(1,0,0,-1)
#distral - proximal
proximal_distal = c(0,-1,1,0)
#define the matrix
cold = rbind(1/4,within_across,caudal_rostral,proximal_distal)
#solve it
cold = solve(cold)
#remove the constant
cold = cold[,-1]
## hypothsis 1
# Cold
model_cold_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = cold)
)
summary(model_cold_exp1)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork, cowplot
)
source(here::here("scripts","utility.R"))
source(here::here("scripts","plots.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T)
save.image("~/tgi-spinal/Workspace/stats.RData")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork, cowplot
)
source(here::here("scripts","utility.R"))
source(here::here("scripts","plots.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = F)
#save.image("~/tgi-spinal/Workspace/stats.RData")
list2env(stats, envir=environment())
ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
plot1(include_zero = F)
#plot1(include_zero = T)
plot2(include_zero = F)
#plot2(include_zero = T)
stats_model_cold_exp1$beta[8]
stats_model_cold_exp1$beta[4]
