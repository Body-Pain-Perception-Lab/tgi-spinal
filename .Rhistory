data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = constast))
summary(model_cold_exp1)
model_cold_exp = glmmTMB::glmmTMB(beta ~ cold_probe *manipulation+trial_n+(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit)
summary(model_cold_exp)
summary(model_cold_exp1)
summary(model_cold_exp)
df_long_exp1$cold_probe = relevel(df_long_exp1$cold_probe, ref = "distal")
model_cold_exp = glmmTMB::glmmTMB(beta ~ cold_probe *manipulation+trial_n+(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit)
summary(model_cold_exp1)
summary(model_cold_exp)
summary(model_cold)
interaction_constast <- constast
interaction_constast <- cbind(interaction_constast, interaction_constast[, 2:4] * constast[, 2])
interaction_constast
interaction_constast[, 2:4] * constast[, 2]
?glmmTMB
levels(df_long_exp1$cold_probe)
#within - across
within_across = c(-1/2,1/2,1/2,-1/2)
caudal_rostral = c(1,0,0,-1)
distal_proximal = c(0,1,-1,0)
constast = rbind(1/4,within_across,caudal_rostral,distal_proximal)
constast = solve(constast)
## hypothsis 1
# Cold
constast = constast[,-1]
model_cold_exp1 = glmmTMB::glmmTMB(beta ~ cold_probe *manipulation+trial_n+(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = constast))
lm(model_cold = glmmTMB::glmmTMB(beta ~ manipulation * condition + trial_n, data = df_long_exp1)
mk = lm(model_cold = glmmTMB::glmmTMB(beta ~ manipulation * condition + trial_n, data = df_long_exp1)
mk = lm(model_cold = glmmTMB::glmmTMB(beta ~ manipulation * condition + trial_n, data = df_long_exp1)
mk = model_cold = lm((beta ~ manipulation * condition + trial_n, data = df_long_exp1)
mk = model_cold = lm((beta ~ manipulation * condition + trial_n, data = df_long_exp1))
mk = model_cold = lm((beta ~ manipulation * condition + trial_n, data = df_long_exp1))
mk = lm(beta ~ manipulation * condition + trial_n, data = df_long_exp1)
summary(mk)
mk$qr$qr
mk$qr$qr$contrasts
mk$contrasts
mk$contrasts$manipulation
mk$contrasts$manipulation[1]
a = mk$contrasts$manipulation
a = mk$contrasts$condition
mk$contrasts$condition
contr.treatment(df_long_exp1$manipulation)
contr.treatment(as.factor(df_long_exp1$manipulation))
levels(df_long_exp1$manipulation)
######### Exp 1 (Hypothesis 1)
df_long_exp1 = df_long_exp1 %>% mutate(cold_probe = as.factor(cold_probe), manipulation = as.factor(manipulation))
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'))
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'))
df_long_exp1 = experiment1$df_long
df_long_exp2 = experiment2$df_long
######### Exp 1 (Hypothesis 1)
df_long_exp1 = df_long_exp1 %>% mutate(cold_probe = as.factor(cold_probe), manipulation = as.factor(manipulation))
levels(df_long_exp1$cold_probe)
#within - across
within_across = c(-1/2,1/2,1/2,-1/2)
#within - across
within_across = c(-1/2,1/2,1/2,-1/2)
caudal_rostral = c(1,0,0,-1)
distal_proximal = c(0,1,-1,0)
cold = rbind(1/4,within_across,caudal_rostral,distal_proximal)
cold = solve(cold)
levels(df_long_exp1$manipulation)
#within - across
TGI_CNT = c(-1,1)
cold = rbind(1/2,TGI_CNT)
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'))
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'))
df_long_exp1 = experiment1$df_long
df_long_exp2 = experiment2$df_long
######### Exp 1 (Hypothesis 1)
df_long_exp1 = df_long_exp1 %>% mutate(cold_probe = as.factor(cold_probe), manipulation = as.factor(manipulation))
##constats:
levels(df_long_exp1$cold_probe)
#within - across
within_across = c(-1/2,1/2,1/2,-1/2)
caudal_rostral = c(1,0,0,-1)
distal_proximal = c(0,1,-1,0)
cold = rbind(1/4,within_across,caudal_rostral,distal_proximal)
cold = solve(cold)
cold = cold[,-1]
levels(df_long_exp1$manipulation)
#within - across
TGI_CNT = c(-1,1)
mani = rbind(1/2,TGI_CNT)
mani = solve(mani)
mani = mani[,-1]
model_cold_exp1 = glmmTMB::glmmTMB(beta ~ cold_probe *manipulation+trial_n+(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = cold,
manipulation = mani))
summary(model_cold_exp1)
model_cold = glmmTMB::glmmTMB(beta ~ manipulation * condition + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit)
summary(model_cold)
mani
mani = rbind(1/2,TGI_CNT)
mani
TGI_CNT
within_across = c(-1/2,1/2,1/2,-1/2)
caudal_rostral = c(1,0,0,-1)
distal_proximal = c(0,1,-1,0)
cold = rbind(1/4,within_across,caudal_rostral,distal_proximal)
cold
cold = solve(cold)
cold
cold = cold[,-1]
cold
levels(df_long_exp1$manipulation)
#within - across
TGI_CNT = c(-1,1)
mani = rbind(1/2,TGI_CNT)
mani
mani = solve(mani)
mani
mani = mani[,-1]
mani
levels(df_long_exp1$manipulation)
#within - across
TGI_CNT = c(-1,1)
CNT_TGI = c(1,-1)
mani = rbind(1/2,TGI_CNT)
mani = solve(mani)
mani = mani[,-1]
mani
mani = rbind(1/2,TGI_CNT,CNT_TGI)
mani = solve(mani)
#within - across
TGI_CNT = c(-1/2,1/2)
model_cold_exp1 = glmmTMB::glmmTMB(beta ~ cold_probe *manipulation+trial_n+(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = cold,
manipulation = TGI_CNT))
summary(model_cold_exp1)
#within - across
TGI_CNT = c(-1,1)
model_cold_exp1 = glmmTMB::glmmTMB(beta ~ cold_probe *manipulation+trial_n+(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = cold,
manipulation = TGI_CNT))
summary(model_cold_exp1)
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'))
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'))
df_long_exp1 = experiment1$df_long
df_long_exp2 = experiment2$df_long
######### Exp 1 (Hypothesis 1)
df_long_exp1 = df_long_exp1 %>% mutate(cold_probe = as.factor(cold_probe), manipulation = as.factor(manipulation))
##constats:
levels(df_long_exp1$cold_probe)
#within - across
within_across = c(-1/2,1/2,1/2,-1/2)
caudal_rostral = c(1,0,0,-1)
distal_proximal = c(0,1,-1,0)
cold = rbind(1/4,within_across,caudal_rostral,distal_proximal)
cold = solve(cold)
cold = cold[,-1]
levels(df_long_exp1$manipulation)
#within - across
TGI_CNT = c(-1,1)
model_cold_exp1 = glmmTMB::glmmTMB(beta ~ cold_probe *manipulation+trial_n+(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = cold,
manipulation = TGI_CNT))
model_cold_exp = glmmTMB::glmmTMB(beta ~ cold_probe *manipulation+trial_n+(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit,contrasts=list(cold_probe = cold))
model_cold = glmmTMB::glmmTMB(beta ~ manipulation * condition + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit)
summary(model_cold)
summary(model_cold_exp1)
summary(model_cold_exp)
mm = glmmTMB::glmmTMB(beta ~ cold_probe *manipulation+trial_n+(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold') %>% mutate(cold_probe = relevel(cold_probe, ref = "distal")),
na.action = na.omit)
summary(mm)
mm = glmmTMB::glmmTMB(beta ~ cold_probe *manipulation+trial_n+(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold') %>% mutate(cold_probe = relevel(cold_probe, ref = "rostral")),
na.action = na.omit)
summary(mm)
df_long_exp1$manipulation
levels(df_long_exp1$manipulation)
levels(df_long_exp1$cold_probe)
## hypothsis 1
# Cold
model_cold_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = cold)
)
summary(model_cold_exp1)
summary(model_cold_exp1)
# Cold
model_cold_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp2 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = cold)
)
summary(model_cold_exp2)
# Cold
model_cold_exp2 = glmmTMB::glmmTMB(beta ~ cold_prob*manipulation  + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp2 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = cold)
)
# Cold
model_cold_exp2 = glmmTMB::glmmTMB(beta ~ cold_probe*manipulation  + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp2 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = cold)
)
summary(model_cold_exp2)
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'))
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'))
df_long_exp1 = experiment1$df_long %>% mutate(cold_probe = as.factor(cold_probe), manipulation = as.factor(manipulation))
df_long_exp2 = experiment2$df_long %>% mutate(cold_probe = as.factor(cold_probe), manipulation = as.factor(manipulation))
## Define constrats such that we both get within / across (i.e. distal & proximal vs rostral & caudual)
levels(df_long_exp1$cold_probe)
# "caudal"   "distal"   "proximal" "rostral"
#within - across
within_across = c(-1/2,1/2,1/2,-1/2)
#caudal - rostral
caudal_rostral = c(1,0,0,-1)
#distral - proximal
distal_proximal = c(0,1,-1,0)
#define the matrix
cold = rbind(1/4,within_across,caudal_rostral,distal_proximal)
#solve it
cold = solve(cold)
#remove the constant
cold = cold[,-1]
######### Exp 1 (Hypothesis 1)
## hypothsis 1
# Cold
model_cold_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = cold)
)
summary(model_cold_exp1)
stats_model_cold_exp1 = summary_stat(model_cold_exp1, 8,r)
r = ""
r = 2
stats_model_cold_exp1 = summary_stat(model_cold_exp1, 8,r)
stats_model_cold_exp1
summary(model_cold_exp1)
stats_model_cold_exp1$stat[[6]]
# Warm
model_warm_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'warm'),
na.action = na.omit)
summary(model_warm_exp1)
stats_model_warm_exp1 = summary_stat(model_warm_exp1, 8,r)
stats_model_warm_exp1
# Warm
model_warm_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'warm'),
na.action = na.omit,
contrasts=list(cold_probe = cold)
)
stats_model_warm_exp1 = summary_stat(model_warm_exp1, 8,r)
summary(model_warm_exp1)
# Burn
#The burning hypothesis is only for participants that experience burning TGI
#(aka are responders)
# First, remove non-responders
df_resp_exp1 <- df_long_exp1 %>%
filter(responder == 1)
# check n
length(unique(df_resp_exp1$ID))
model_burn_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_resp_exp1 %>% filter(quality == 'burn'),
na.action = na.omit,
contrasts=list(cold_probe = cold)
)
summary(model_burn_exp1)
# Warm
model_warm_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp2 %>% filter(quality == 'warm'),
na.action = na.omit,
contrasts=list(cold_probe = cold))
summary(model_warm_exp2)
# Burn
#The burning hypothesis is only for participants that experience burning TGI
#(aka are responders)
# First, remove non-responders
df_resp_exp2 <- df_long_exp2 %>%
filter(responder == 1)
# check n
length(unique(df_resp_exp2$ID))
model_burn_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_resp_exp2 %>% filter(quality == 'burn'),
na.action = na.omit,
contrasts=list(cold_probe = cold)
)
summary(model_burn_exp2)
# Cold
model_cold_exp2 = glmmTMB::glmmTMB(beta ~ manipulation*cold_probe  + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp2 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = cold)
)
stats_model_cold_exp2 = summary_stat(model_cold_exp2, 8,r)
# Warm
model_warm_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp2 %>% filter(quality == 'warm'),
na.action = na.omit,
contrasts=list(cold_probe = cold))
stats_model_warm_exp2 = summary_stat(model_warm_exp2, 8,r)
# Burn
#The burning hypothesis is only for participants that experience burning TGI
#(aka are responders)
# First, remove non-responders
df_resp_exp2 <- df_long_exp2 %>%
filter(responder == 1)
# check n
length(unique(df_resp_exp2$ID))
model_burn_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_resp_exp2 %>% filter(quality == 'burn'),
na.action = na.omit,
contrasts=list(cold_probe = cold)
)
stats_model_burn_exp2 = summary_stat(model_burn_exp2, 8,r)
summary(model_cold_exp2)
summary(model_warm_exp2)
summary(model_burn_exp2)
summary(model_cold_exp1)
summary(model_cold_exp2)
summary(model_warm_exp1)
summary(model_warm_exp2)
summary(model_burn_exp1)
summary(model_burn_exp2)
summary(model_cold_exp1)
summary(model_cold_exp2)
summary(model_warm_exp1)
summary(model_warm_exp2)
summary(model_burn_exp1)
summary(model_burn_exp2)
summary(model_burn_exp1)
summary(model_burn_exp2)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork, cowplot
)
source(here::here("scripts","utility.R"))
source(here::here("scripts","plots.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork, cowplot
)
source(here::here("scripts","utility.R"))
source(here::here("scripts","plots.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T)
list2env(stats, envir=environment())
save.image("~/tgi-spinal/Workspace/stats.RData")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork, cowplot
)
source(here::here("scripts","utility.R"))
source(here::here("scripts","plots.R"))
#get models
source(here::here("scripts","models.R"))
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'))
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'))
df_long_exp1 = experiment1$df_long %>% mutate(cold_probe = as.factor(cold_probe), manipulation = as.factor(manipulation))
## Define constrats such that we both get within / across (i.e. distal & proximal vs rostral & caudual)
levels(df_long_exp1$cold_probe)
#within - across
within_across = c(-1/2,1/2,1/2,-1/2)
#caudal - rostral
caudal_rostral = c(1,0,0,-1)
#distral - proximal
distal_proximal = c(0,1,-1,0)
#define the matrix
cold = rbind(1/4,within_across,caudal_rostral,distal_proximal)
#solve it
cold = solve(cold)
#remove the constant
cold = cold[,-1]
## hypothsis 1
# Cold
model_cold_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit,
contrasts=list(cold_probe = cold)
)
ggeffects::ggeffect(model_cold_exp1, terms = c("manipulation","cold_probe"))
plot(ggeffects::ggeffect(model_cold_exp1, terms = c("manipulation","cold_probe")))
# Warm
model_warm_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'warm'),
na.action = na.omit,
contrasts=list(cold_probe = cold)
)
summary(model_warm_exp1)
model_cold = glmmTMB::glmmTMB(beta ~ manipulation * condition + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit)
ggeffect(model_cold, terms = c("condition","manipulation"))
plot(ggeffect(model_cold, terms = c("condition","manipulation")))
model_warm = glmmTMB::glmmTMB(beta ~ manipulation * condition + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'warm'),
na.action = na.omit)
plot(ggeffect(model_wram, terms = c("condition","manipulation")))
plot(ggeffect(model_warm, terms = c("condition","manipulation")))
model_warm
summary(model_warm)
plot(ggeffect(model_warm, terms = c("condition","manipulation")))
