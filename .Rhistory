family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = across_exp1 %>% filter(quality == 'cold'),
na.action = na.omit)
stats_across_cold_exp1_control = summary_stat(model_across_cold_exp1,5,2)
stats_across_cold_exp1_TGI = summary_stat(
update(model_across_cold_exp1, data = within_exp1 %>% filter(quality == 'cold') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,2)
stats_across_cold_exp1_TGI = summary_stat(
update(model_across_cold_exp1, data = across_exp1 %>% filter(quality == 'cold') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,2)
stats_across_cold_exp1_control
summary(model_across_cold_exp1)
stats_across_cold_exp1_TGI
save.image("~/tgi-spinal/Workspace/stats.RData")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T, save = T)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T, save = T)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = F, save = F)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = F, save = F)
load(here::here("Workspace","stats.RData"))
View(statistics)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T)
list2env(stats, envir=environment())
save.image("~/tgi-spinal/Workspace/stats.RData")
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'))
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'))
df_long_exp1 = experiment1$df_long
df_long_exp2 = experiment2$df_long
df_long_exp1
df_long_exp2
df_long_exp1$ID
## participant information (all)
rbind(df_long_exp1,df_long_exp2)
View(df_long_exp2)
View(df_long_exp1)
names(df_long_exp1) %in% names(df_long_exp2)
!names(df_long_exp2) %in% names(df_long_exp1)
names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1)]
## participant information (all)
#remove columns in exp2 that isnt in exp1
names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1)]
## participant information (all)
#remove columns in exp2 that isnt in exp1
df_long_exp2[,-names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1)]]
-names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1)]
## participant information (all)
#remove columns in exp2 that isnt in exp1
df_long_exp2[,names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1)]]
## participant information (all)
#remove columns in exp2 that isnt in exp1
df_long_exp2[,-c(names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1))]]
## participant information (all)
#remove columns in exp2 that isnt in exp1
names = names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1)]
df_long_exp2[,-names]
names
df_long_exp2 %>% select(-names)
df_long_exp2 %>% select(-all_of(names))
df_long_exp2 = df_long_exp2 %>% select(-all_of(names))
rbind(df_long_exp1,df_long_exp2)
df = rbind(df_long_exp1,df_long_exp2)
df$Gender
whole_gender = df %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender) %>% summarize(n())
whole_gender
whole_gender = df %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender) %>% slice(1)%>% summarize(n())
whole_gender
whole_gender = df %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% summarize(n())
whole_gender
whole_gender = df %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% ungroup(ID) %>% summarize(n())
whole_gender
whole_gender %>% filter(Gender == F)
whole_gender %>% filter(Gender == "F")
whole_gender %>% filter(Gender == "F") %>% .$n()
whole_gender = df %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% ungroup(ID) %>% summarize(number = n())
whole_gender %>% filter(Gender == "F") %>% .$number
whole_gender %>% filter(Gender == "F") %>% .$number
whole_gender
df %>% group_by(ID) %>% slice(1)
whole_age = df %>% group_by(ID) %>% slice(1)  %>% summarize(mean_age = mean(Age), sd_age = sd(Age))
whole_age
whole_age = df %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T))
whole_age
whole_age$mean_age
whole_age = df %>% group_by(ID) %>% slice(1) %>% summarize(max = max(age), min = min(age)) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T))
whole_age = df %>% group_by(ID) %>% slice(1) %>% summarize(max = max(Age), min = min(Age)) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T))
df %>% group_by(ID) %>% slice(1) %>% summarize(max = max(Age), min = min(Age))
whole_age = df %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T))
whole_age = df %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T),max = max(Age), min = min(Age))
whole_age
whole_age = df %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T),max_age = max(Age), min_age = min(Age))
##exp 1
exp1_gender = df_long_exp1 %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% ungroup(ID) %>% summarize(number = n())
exp1_age = df_long_exp1 %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T),max_age = max(Age), min_age = min(Age))
exp1_gender
exp1_age
##exp 2
exp2_gender = df_long_exp2 %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% ungroup(ID) %>% summarize(number = n())
exp2_age = df_long_exp2 %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T),max_age = max(Age), min_age = min(Age))
exp2_gender
exp2_age
statistics_to_save = ls()[grepl("stats", ls())]
statistics_to_save
data_to_save = ls()[grepl("exp1_", ls())]
data_to_save
data_to_save = ls()[grepl("descript_", ls())]
data_to_save
##exp 1
descript_exp1_gender = df_long_exp1 %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% ungroup(ID) %>% summarize(number = n())
descript_exp1_age = df_long_exp1 %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T),max_age = max(Age), min_age = min(Age))
##exp 2
descript_exp2_gender = df_long_exp2 %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% ungroup(ID) %>% summarize(number = n())
descript_exp2_age = df_long_exp2 %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T),max_age = max(Age), min_age = min(Age))
statistics_to_save = ls()[grepl("stats", ls())]
data_to_save = ls()[grepl("descript_", ls())]
data_to_save
saving = c(statistics_to_save,data_to_save)
saving
version(glmmTMB)
library(glmmTMB)
sessionInfo()
qq = sessionInfo()
View(qq)
qq$otherPkgs$glmmTMB
qq$otherPkgs$glmmTMB$Version
sessionInfo()$otherPkgs$glmmTMB$Version
sessionInfo()$otherPkgs$glmmTMB$Version
sessionInfo()$otherPkgs$glmmTMB$Version
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T)
list2env(stats, envir=environment())
save.image("~/tgi-spinal/Workspace/stats.RData")
descript_exp1_age
descript_exp2_age
round(descript_exp2_age,2)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T)
list2env(stats, envir=environment())
#save.image("~/tgi-spinal/Workspace/stats.RData")
save.image("~/tgi-spinal/Workspace/stats.RData")
format(stats_across_burn_exp1_control$beta[2],nsmall = 2)
format(0.1,nsmall = 2)
format(0.1,nsmall = 3)
format(1,nsmall = 3)
format(1.00,nsmall = 3)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T)
list2env(stats, envir=environment())
#save.image("~/tgi-spinal/Workspace/stats.RData")
save.image("~/tgi-spinal/Workspace/stats.RData")
img <- readPNG(system.file("img", here::here("figures","figure1.PNG"), package="png"))
img <- png::readPNG(system.file("img", here::here("figures","figure1.PNG"), package="png"))
here::here("figures","figure1.PNG")
ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
cowplot::ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
library(cowplot)
cowplot::ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
stats_within_burn_exp2_TGI
stats_within_burn_exp2_control
stats_across_cold_exp1_TGI
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'))
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork, cowplot
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'))
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'))
df_long_exp1 = experiment1$df_long
df_long_exp2 = experiment2$df_long
######### Exp 1 (Hypothesis 1)
## hypothsis 1
# Cold
model_cold_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit)
stats_model_cold_exp1 = summary_stat(model_cold_exp1, 2,r)
r = 2
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'))
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'))
df_long_exp1 = experiment1$df_long
df_long_exp2 = experiment2$df_long
######### Exp 1 (Hypothesis 1)
## hypothsis 1
# Cold
model_cold_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'cold'),
na.action = na.omit)
stats_model_cold_exp1 = summary_stat(model_cold_exp1, 2,r)
# Warm
model_warm_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp1 %>% filter(quality == 'warm'),
na.action = na.omit)
stats_model_warm_exp1 = summary_stat(model_warm_exp1, 2,r)
# Burn
#The burning hypothesis is only for participants that experience burning TGI
#(aka are responders)
# First, remove non-responders
df_resp_exp1 <- df_long_exp1 %>%
filter(responder == 1)
# check n
length(unique(df_resp_exp1$ID))
model_burn_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_resp_exp1 %>% filter(quality == 'burn'),
na.action = na.omit)
stats_model_burn_exp1 = summary_stat(model_burn_exp1, 2,r)
## hypothsis 2 (within)
within_exp1 <- df_long_exp1 %>%
filter(condition == 'within')
# within
### cold
model_within_cold_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = within_exp1 %>% filter(quality == 'cold'),
na.action = na.omit)
stats_within_cold_exp1_control = summary_stat(model_within_cold_exp1,5,r)
stats_within_cold_exp1_TGI = summary_stat(
update(model_within_cold_exp1, data = within_exp1 %>% filter(quality == 'cold') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,r)
###warm
model_within_warm_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = within_exp1 %>% filter(quality == 'warm'),
na.action = na.omit)
stats_within_warm_exp1_control = summary_stat(model_within_warm_exp1,5,r)
stats_within_warm_exp1_TGI = summary_stat(
update(model_within_warm_exp1, data = within_exp1 %>% filter(quality == 'warm') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,2)
## burning
within_exp1 <- df_long_exp1 %>%
filter(condition == 'within' & responder == 1)
# within
model_within_burn_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = within_exp1 %>% filter(quality == 'burn'),
na.action = na.omit)
stats_within_burn_exp1_control = summary_stat(model_within_burn_exp1,5,r)
stats_within_burn_exp1_TGI = summary_stat(
update(model_within_burn_exp1, data = within_exp1 %>% filter(quality == 'burn') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,r)
## hypothsis 2 (within)
across_exp1 <- df_long_exp1 %>%
filter(condition == 'across')
# within
### cold
model_across_cold_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = across_exp1 %>% filter(quality == 'cold'),
na.action = na.omit)
stats_across_cold_exp1_control = summary_stat(model_across_cold_exp1,5,r)
stats_across_cold_exp1_TGI = summary_stat(
update(model_across_cold_exp1, data = across_exp1 %>% filter(quality == 'cold') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,r)
###warm
model_across_warm_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = across_exp1 %>% filter(quality == 'warm'),
na.action = na.omit)
stats_across_warm_exp1_control = summary_stat(model_across_warm_exp1,5,r)
stats_across_warm_exp1_TGI = summary_stat(
update(model_across_warm_exp1, data = across_exp1 %>% filter(quality == 'warm') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,r)
## burning
across_exp1 <- df_long_exp1 %>%
filter(condition == 'across' & responder == 1)
# within
model_across_burn_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = across_exp1 %>% filter(quality == 'burn'),
na.action = na.omit)
stats_across_burn_exp1_control = summary_stat(model_across_burn_exp1,5,r)
stats_across_burn_exp1_TGI = summary_stat(
update(model_across_burn_exp1, data = across_exp1 %>% filter(quality == 'burn') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,r)
######### Exp 2 (Hypothesis 1)
# Cold
model_cold_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp2 %>% filter(quality == 'cold'),
na.action = na.omit)
stats_model_cold_exp2 = summary_stat(model_cold_exp2, 2,r)
# Warm
model_warm_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp2 %>% filter(quality == 'warm'),
na.action = na.omit)
stats_model_warm_exp2 = summary_stat(model_warm_exp2, 2,r)
# Burn
#The burning hypothesis is only for participants that experience burning TGI
#(aka are responders)
# First, remove non-responders
df_resp_exp2 <- df_long_exp2 %>%
filter(responder == 1)
# check n
length(unique(df_resp_exp2$ID))
model_burn_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_resp_exp2 %>% filter(quality == 'burn'),
na.action = na.omit)
stats_model_burn_exp2 = summary_stat(model_burn_exp2, 2,r)
## hypothsis 2 (within)
within_exp2 <- df_long_exp2 %>%
filter(condition == 'within')
# within
### cold
model_within_cold_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = within_exp2 %>% filter(quality == 'cold'),
na.action = na.omit)
stats_within_cold_exp2_control = summary_stat(model_within_cold_exp2,5,r)
stats_within_cold_exp2_TGI = summary_stat(
update(model_within_cold_exp2, data = within_exp2 %>% filter(quality == 'cold') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,r)
###warm
model_within_warm_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = within_exp2 %>% filter(quality == 'warm'),
na.action = na.omit)
stats_within_warm_exp2_control = summary_stat(model_within_warm_exp2,5,r)
stats_within_warm_exp2_TGI = summary_stat(
update(model_within_warm_exp2, data = within_exp2 %>% filter(quality == 'warm') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,r)
## burning
within_exp2 <- df_long_exp2 %>%
filter(condition == 'within' & responder == 1)
# within
model_within_burn_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = within_exp2 %>% filter(quality == 'burn'),
na.action = na.omit)
stats_within_burn_exp2_control = summary_stat(model_within_burn_exp2,5,r)
stats_within_burn_exp2_TGI = summary_stat(
update(model_within_burn_exp2, data = within_exp2 %>% filter(quality == 'burn') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,r)
#hypothesis 2 (across)
across_exp2 <- df_long_exp2 %>%
filter(condition == 'across')
### cold
model_across_cold_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = across_exp2 %>% filter(quality == 'cold'),
na.action = na.omit)
stats_across_cold_exp2_control = summary_stat(model_across_cold_exp2,5,r)
stats_across_cold_exp2_TGI = summary_stat(
update(model_across_cold_exp2, data = across_exp2 %>% filter(quality == 'cold') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,r)
###warm
model_across_warm_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = across_exp2 %>% filter(quality == 'warm'),
na.action = na.omit)
stats_across_warm_exp2_control = summary_stat(model_across_warm_exp2,5,r)
stats_across_warm_exp2_TGI = summary_stat(
update(model_across_warm_exp2, data = across_exp2 %>% filter(quality == 'warm') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,r)
## burning
across_exp2 <- df_long_exp2 %>%
filter(condition == 'across' & responder == 1)
# within
model_across_burn_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = across_exp2 %>% filter(quality == 'burn'),
na.action = na.omit)
stats_across_burn_exp2_control = summary_stat(model_across_burn_exp2,5,r)
stats_across_burn_exp2_TGI = summary_stat(
update(model_across_burn_exp2, data = across_exp2 %>% filter(quality == 'burn') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,r)
summary(model_across_cold_exp2)
summary(model_across_cold_exp1)
stats_across_cold_exp2_TGI
stats_across_cold_exp2_control
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork, cowplot
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = F)
list2env(stats, envir=environment())
#save.image("~/tgi-spinal/Workspace/stats.RData")
ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
plot1()
plot2()
summary(model_cold_exp1)
summary(model_warm_exp1)
summary(model_burn_exp1)
summary(model_burn_exp2)
summary(model_warm_exp1)
summary(model_cold_exp1)
