theme(legend.position = 'none') -> h2_diff_across
# arrange entire plot
h2diff_plot <- ggarrange(h2_diff_within, h2_diff_across,
nrow = 2, ncol = 1)
h2diff_plot
ggsave(here::here("figures", "E2_H2_difference.png"), plot = h2diff_plot,
device = NULL, width = 9, height = 5, dpi = 600)
set.seed(1234)  # Make everything reproducible
# Define the goodness-of-fit stats to include in modelsummary()
gof_stuff <- tribble(
~raw, ~clean, ~fmt,
"nobs", "N", 0,
"r.squared", "RÂ²", 3
)
# recode cold_location and condition to reduce levels in regression
df_long$cold_cond[df_long$cold_probe == 'distal'] <- 'dist_rostr'
df_long$cold_cond[df_long$cold_probe == 'rostral'] <- 'dist_rostr'
df_long$cold_cond[df_long$cold_probe == 'proximal'] <- 'prox_caud'
df_long$cold_cond[df_long$cold_probe == 'caudal'] <- 'prox_caud'
# to run zero inflated regressions need to make sure no values = 100,
# as cannot model them, so simply minus a very small fraction from those values
df_long$beta <- ifelse(df_long$VAS==100, df_long$beta-0.0001, df_long$beta <- df_long$VAS)
df_long$beta <- df_long$beta/100
# transform variables into proportions (aka divide by 100), this makes the effect size estimates more logical
#df_long$VAS <- df_long$VAS/100
df_long$ID <- factor(df_long$ID)
df_long_exp2 = df_long
# Try and model all with ratings
model.cold = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp2 %>% filter(quality == 'cold'),
na.action = na.omit)
mc <- summary(model.cold)
mc
Anova(model.cold)
# get Rsq with the mumin package
cold_eff <- ggeffects::ggpredict(model.cold, terms = c('cold_cond', 'manipulation', 'condition'),
ci.lvl = .95)
# changing labels for plotting
cold_eff$group <- factor(cold_eff$group, labels = c('Non-TGI', 'TGI'))
cold_eff <- cold_eff %>%
mutate(label =
case_when(facet == 'across' & x == 'prox_caud' ~ 'caudal',
facet == 'across' & x == 'dist_rostr' ~ 'rostral',
facet == 'within' & x == 'prox_caud' ~ 'proximal',
facet == 'within' & x == 'dist_rostr' ~ 'distal',)
)
cold_eff$label = factor(cold_eff$label, levels = c('proximal','distal','caudal','rostral'))
# plotting - within
ggplot(data = cold_eff %>%
filter(facet == 'within'),
aes(label, predicted, group = group, colour = group),) +
geom_point(position = position_dodge(.3), size = 2.5) +
geom_line(position = position_dodge(.3), size = 1) +
geom_errorbar(aes(label, ymin = conf.low, ymax = conf.high),
position = position_dodge(.3), width = .1, size = .8) +
ylim(0, 0.5) +
labs(x = NULL, y = 'Predicted Cold Rating (0 - 1)') +
facet_wrap(~facet) +
scale_colour_manual(values = c(blue[4], blue[7])) +
theme_classic() +
theme(legend.title = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11)) -> plot_coldw_eff
# plotting - across
ggplot(data = cold_eff %>%
filter(facet == 'across'),
aes(label, predicted, group = group, colour = group),) +
geom_point(position = position_dodge(.3), size = 2.5) +
geom_line(position = position_dodge(.3), size = 1) +
geom_errorbar(aes(label, ymin = conf.low, ymax = conf.high),
position = position_dodge(.3), width = .1, size = .8) +
ylim(0, 0.5) +
labs(x = NULL, y = '') +
facet_wrap(~facet) +
scale_colour_manual(values = c(blue[4], blue[7])) +
theme_classic() +
theme(legend.title = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 10)) -> plot_colda_eff
# combine
plot_cold_eff1 <- ggarrange(plot_coldw_eff, plot_colda_eff,
ncol = 2, nrow = 1,
common.legend = TRUE,
legend = 'right')
plot_cold_eff1
# Try and model all with ratings
model.warm = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp2 %>% filter(quality == 'warm'),
na.action = na.omit)
mw <- summary(model.warm)
mw
Anova(model.warm)
# save results
warm_eff <- ggeffects::ggpredict(model.warm, terms = c('cold_cond', 'manipulation', 'condition'),
ci.lvl = .95)
# changing labels for plotting
warm_eff$group <- factor(warm_eff$group, labels = c('Non-TGI', 'TGI'))
warm_eff <- warm_eff %>%
mutate(label =
case_when(facet == 'across' & x == 'prox_caud' ~ 'caudal',
facet == 'across' & x == 'dist_rostr' ~ 'rostral',
facet == 'within' & x == 'prox_caud' ~ 'proximal',
facet == 'within' & x == 'dist_rostr' ~ 'distal',)
)
warm_eff$label = factor(warm_eff$label, levels = c('proximal','distal','caudal','rostral'))
# plotting - within
ggplot(data = warm_eff %>%
filter(facet == 'within'),
aes(label, predicted, group = group, colour = group),) +
geom_point(position = position_dodge(.3), size = 2.5) +
geom_line(position = position_dodge(.3), size = 1) +
geom_errorbar(aes(label, ymin = conf.low, ymax = conf.high),
position = position_dodge(.3), width = .1, size = .8) +
ylim(0, 0.5) +
labs(x = NULL, y = 'Predicted Warm Rating (0 - 1)') +
facet_wrap(~facet) +
scale_colour_manual(values = c(oran[4], oran[7])) +
theme_classic() +
theme(legend.title = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11)) -> plot_warmw_eff
# plotting - across
ggplot(data = warm_eff %>%
filter(facet == 'across'),
aes(label, predicted, group = group, colour = group),) +
geom_point(position = position_dodge(.3), size = 2.5) +
geom_line(position = position_dodge(.3), size = 1) +
geom_errorbar(aes(label, ymin = conf.low, ymax = conf.high),
position = position_dodge(.3), width = .1, size = .8) +
ylim(0, 0.5) +
labs(x = NULL, y = '') +
facet_wrap(~facet) +
scale_colour_manual(values = c(oran[4], oran[7])) +
theme_classic() +
theme(legend.title = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 10)) -> plot_warma_eff
# combine
plot_warm_eff1 <- ggarrange(plot_warmw_eff, plot_warma_eff,
ncol = 2, nrow = 1,
common.legend = TRUE,
legend = 'right')
plot_warm_eff1
# First, remove non-responders
df_resp_exp2 <- df_long_exp2 %>%
filter(responder == 1)
# check n
n <- count(df_resp_exp2, 'ID')
length(n$ID)
# Try and model all with ratings
model.burn = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond +
trial_n + (1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_resp_exp2 %>% filter(quality == 'burn'),
na.action = na.omit)
mb <- summary(model.burn)
mb
Anova(model.burn)
burn_eff <- ggeffects::ggpredict(model.burn, terms = c('cold_cond', 'manipulation', 'condition'),
ci.lvl = .95)
# changing labels for plotting
burn_eff$group <- factor(burn_eff$group, labels = c('Non-TGI', 'TGI'))
burn_eff <- burn_eff %>%
mutate(label =
case_when(facet == 'across' & x == 'prox_caud' ~ 'caudal',
facet == 'across' & x == 'dist_rostr' ~ 'rostral',
facet == 'within' & x == 'prox_caud' ~ 'proximal',
facet == 'within' & x == 'dist_rostr' ~ 'distal',)
)
burn_eff$label = factor(burn_eff$label, levels = c('proximal','distal','caudal','rostral'))
# plotting - within
ggplot(data = burn_eff %>%
filter(facet == 'within'),
aes(label, predicted, group = group, colour = group),) +
geom_point(position = position_dodge(.3), size = 2.5) +
geom_line(position = position_dodge(.3), size = 1) +
geom_errorbar(aes(label, ymin = conf.low, ymax = conf.high),
position = position_dodge(.3), width = .1, size = .8) +
ylim(0, 0.5) +
labs(x = NULL, y = 'Predicted Burn Rating (0 - 1)') +
facet_wrap(~facet) +
scale_colour_manual(values = c(purp[4], purp[7])) +
theme_classic() +
theme(legend.title = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 11)) -> plot_burnw_eff
# plotting - across
ggplot(data = burn_eff %>%
filter(facet == 'across'),
aes(label, predicted, group = group, colour = group),) +
geom_point(position = position_dodge(.3), size = 2.5) +
geom_line(position = position_dodge(.3), size = 1) +
geom_errorbar(aes(label, ymin = conf.low, ymax = conf.high),
position = position_dodge(.3), width = .1, size = .8) +
ylim(0, 0.5) +
labs(x = NULL, y = '') +
facet_wrap(~facet) +
scale_colour_manual(values = c(purp[4], purp[7])) +
theme_classic() +
theme(legend.title = element_blank(),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12),
strip.text = element_text(size = 12),
legend.text = element_text(size = 10)) -> plot_burna_eff
# combine
plot_burn_eff1 <- ggarrange(plot_burnw_eff, plot_burna_eff,
ncol = 2, nrow = 1,
common.legend = TRUE,
legend = 'right')
plot_burn_eff1
# Getting the marginal effects for plotting
# First the zeros - create new lm mo
df_long$bin <- ifelse(df_long$VAS == 0, 1, 0)
df_resp$bin <- ifelse(df_resp$VAS == 0, 1, 0)
within_exp2 <- df_long_exp2 %>%
filter(condition == 'within')
across_exp2 <-  df_long_exp2 %>%
filter(condition == 'across')
# within
model.wcold = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = within_exp2 %>% filter(quality == 'cold'),
na.action = na.omit)
mwc <- summary(model.wcold)
mwc
######### Exp 2
# Cold
model_cold_exp2 = glmmTMB::glmmTMB(beta ~ manipulation * condition * cold_cond + trial_n +
(1|ID) + (1|order),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = df_long_exp2 %>% filter(quality == 'cold'),
na.action = na.omit)
stats_model_cold_exp2 = summary_stat(model_cold_exp2, 2,2)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T)
list2env(stats, envir=environment())
save.image("~/tgi-spinal/Workspace/stats.RData")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'))
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'))
df_long_exp1 = experiment1$df_long
df_long_exp2 = experiment2$df_long
across_exp1 <- df_long_exp1 %>%
filter(condition == 'across')
model_across_cold_exp1 = glmmTMB::glmmTMB(beta ~ manipulation * cold_probe + procedure + trial_n +
(1|ID),
family = glmmTMB::beta_family(),
ziformula = ~1+manipulation,
data = across_exp1 %>% filter(quality == 'cold'),
na.action = na.omit)
stats_across_cold_exp1_control = summary_stat(model_across_cold_exp1,5,2)
stats_across_cold_exp1_TGI = summary_stat(
update(model_across_cold_exp1, data = within_exp1 %>% filter(quality == 'cold') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,2)
stats_across_cold_exp1_TGI = summary_stat(
update(model_across_cold_exp1, data = across_exp1 %>% filter(quality == 'cold') %>% mutate(manipulation = as.factor(manipulation), manipulation = relevel(manipulation, ref ="TGI"))),
2,2)
stats_across_cold_exp1_control
summary(model_across_cold_exp1)
stats_across_cold_exp1_TGI
save.image("~/tgi-spinal/Workspace/stats.RData")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T, save = T)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T, save = T)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = F, save = F)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = F, save = F)
load(here::here("Workspace","stats.RData"))
View(statistics)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T)
list2env(stats, envir=environment())
save.image("~/tgi-spinal/Workspace/stats.RData")
experiment1 = prep_data(file.path("data", 'STGI_exp1_compiled-data.csv'))
experiment2 = prep_data(file.path("data", 'STGI_exp2_compiled-data.csv'))
df_long_exp1 = experiment1$df_long
df_long_exp2 = experiment2$df_long
df_long_exp1
df_long_exp2
df_long_exp1$ID
## participant information (all)
rbind(df_long_exp1,df_long_exp2)
View(df_long_exp2)
View(df_long_exp1)
names(df_long_exp1) %in% names(df_long_exp2)
!names(df_long_exp2) %in% names(df_long_exp1)
names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1)]
## participant information (all)
#remove columns in exp2 that isnt in exp1
names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1)]
## participant information (all)
#remove columns in exp2 that isnt in exp1
df_long_exp2[,-names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1)]]
-names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1)]
## participant information (all)
#remove columns in exp2 that isnt in exp1
df_long_exp2[,names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1)]]
## participant information (all)
#remove columns in exp2 that isnt in exp1
df_long_exp2[,-c(names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1))]]
## participant information (all)
#remove columns in exp2 that isnt in exp1
names = names(df_long_exp2)[!names(df_long_exp2) %in% names(df_long_exp1)]
df_long_exp2[,-names]
names
df_long_exp2 %>% select(-names)
df_long_exp2 %>% select(-all_of(names))
df_long_exp2 = df_long_exp2 %>% select(-all_of(names))
rbind(df_long_exp1,df_long_exp2)
df = rbind(df_long_exp1,df_long_exp2)
df$Gender
whole_gender = df %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender) %>% summarize(n())
whole_gender
whole_gender = df %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender) %>% slice(1)%>% summarize(n())
whole_gender
whole_gender = df %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% summarize(n())
whole_gender
whole_gender = df %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% ungroup(ID) %>% summarize(n())
whole_gender
whole_gender %>% filter(Gender == F)
whole_gender %>% filter(Gender == "F")
whole_gender %>% filter(Gender == "F") %>% .$n()
whole_gender = df %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% ungroup(ID) %>% summarize(number = n())
whole_gender %>% filter(Gender == "F") %>% .$number
whole_gender %>% filter(Gender == "F") %>% .$number
whole_gender
df %>% group_by(ID) %>% slice(1)
whole_age = df %>% group_by(ID) %>% slice(1)  %>% summarize(mean_age = mean(Age), sd_age = sd(Age))
whole_age
whole_age = df %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T))
whole_age
whole_age$mean_age
whole_age = df %>% group_by(ID) %>% slice(1) %>% summarize(max = max(age), min = min(age)) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T))
whole_age = df %>% group_by(ID) %>% slice(1) %>% summarize(max = max(Age), min = min(Age)) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T))
df %>% group_by(ID) %>% slice(1) %>% summarize(max = max(Age), min = min(Age))
whole_age = df %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T))
whole_age = df %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T),max = max(Age), min = min(Age))
whole_age
whole_age = df %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T),max_age = max(Age), min_age = min(Age))
##exp 1
exp1_gender = df_long_exp1 %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% ungroup(ID) %>% summarize(number = n())
exp1_age = df_long_exp1 %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T),max_age = max(Age), min_age = min(Age))
exp1_gender
exp1_age
##exp 2
exp2_gender = df_long_exp2 %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% ungroup(ID) %>% summarize(number = n())
exp2_age = df_long_exp2 %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T),max_age = max(Age), min_age = min(Age))
exp2_gender
exp2_age
statistics_to_save = ls()[grepl("stats", ls())]
statistics_to_save
data_to_save = ls()[grepl("exp1_", ls())]
data_to_save
data_to_save = ls()[grepl("descript_", ls())]
data_to_save
##exp 1
descript_exp1_gender = df_long_exp1 %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% ungroup(ID) %>% summarize(number = n())
descript_exp1_age = df_long_exp1 %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T),max_age = max(Age), min_age = min(Age))
##exp 2
descript_exp2_gender = df_long_exp2 %>% mutate(Gender = as.factor(Gender)) %>% group_by(Gender,ID) %>% slice(1) %>% ungroup(ID) %>% summarize(number = n())
descript_exp2_age = df_long_exp2 %>% group_by(ID) %>% slice(1) %>% ungroup(ID)  %>% summarize(mean_age = mean(Age, na.rm = T), sd_age = sd(Age, na.rm = T),max_age = max(Age), min_age = min(Age))
statistics_to_save = ls()[grepl("stats", ls())]
data_to_save = ls()[grepl("descript_", ls())]
data_to_save
saving = c(statistics_to_save,data_to_save)
saving
version(glmmTMB)
library(glmmTMB)
sessionInfo()
qq = sessionInfo()
View(qq)
qq$otherPkgs$glmmTMB
qq$otherPkgs$glmmTMB$Version
sessionInfo()$otherPkgs$glmmTMB$Version
sessionInfo()$otherPkgs$glmmTMB$Version
sessionInfo()$otherPkgs$glmmTMB$Version
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T)
list2env(stats, envir=environment())
save.image("~/tgi-spinal/Workspace/stats.RData")
descript_exp1_age
descript_exp2_age
round(descript_exp2_age,2)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T)
list2env(stats, envir=environment())
#save.image("~/tgi-spinal/Workspace/stats.RData")
save.image("~/tgi-spinal/Workspace/stats.RData")
format(stats_across_burn_exp1_control$beta[2],nsmall = 2)
format(0.1,nsmall = 2)
format(0.1,nsmall = 3)
format(1,nsmall = 3)
format(1.00,nsmall = 3)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson, patchwork
)
source(here::here("scripts","utility.R"))
#get models
source(here::here("scripts","models.R"))
stats = statistics(rerun = T)
list2env(stats, envir=environment())
#save.image("~/tgi-spinal/Workspace/stats.RData")
save.image("~/tgi-spinal/Workspace/stats.RData")
img <- readPNG(system.file("img", here::here("figures","figure1.PNG"), package="png"))
img <- png::readPNG(system.file("img", here::here("figures","figure1.PNG"), package="png"))
here::here("figures","figure1.PNG")
ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
cowplot::ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
library(cowplot)
cowplot::ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
ggdraw() +
draw_image(magick::image_read(here::here("figures","figure1.PNG")), scale = 1)
