## Loading libraries
# check for pacman package and install if not found
if (!require("pacman")) install.packages("pacman")
pacman::p_load(boot, broom, broom.mixed, brms, car, caret, corrplot, DHARMa, gamlss,
ggeffects, gghalves, ggpol, ggpubr, glmmTMB, groupdata2, lme4, lmerTest,
modelsummary, MuMIn, polycor, RColorBrewer, rcompanion, reshape2, Rmisc,
rsample, rstatix, simr, tibble, tidyverse, wesanderson
)
# experiment 1 file
dat_file <- file.path("data", 'STGI_exp2_compiled-data.csv')
# load all data file
if (file.exists(dat_file)){
df_res <- read.csv(dat_file)
} else {
print('Data file does not exist, check data is in current directory.
If not, run tgi-compiler.Rmd')
}
# Calculate median burning rating for all participants
# TGI trials only
# Then flag how many are not sig > 0
df_med <- aggregate(VASburn~ID*manipulation*cold_probe*trial_type, median, data = df_res)
tgi <-  df_med %>%
filter(manipulation == 'TGI')
cnt <-  df_med %>%
filter(manipulation == 'CNT')
# identify test results where pvalue is < .05
tgi$ID <- as.factor(tgi$ID)
i = 0
test = data.frame(matrix(nrow = 40, ncol = 3))
colnames(test) <- c('ID','pval','responder')
for (id in levels(tgi$ID)){
i = i+1
tmp1 <- tgi[tgi$ID == id ,]
test$ID[i] <- id
test$pval[i] <- (t.test(tmp1$VASburn, mu = 0, alternative = 'greater'))$p.value
test$responder[i] <- isTRUE(test$pval[i] < .05)
}
# combine responder logic with main data-frame
test$responder <- ifelse(test$responder == TRUE, 1, 0)
test <- test[, c(1,3)]
df_res <- merge(df_res, test, by = 'ID')
# count the number of false responses
nNONRESP <- sum(test$responder == FALSE)
# print
print(paste0('Non responders: ', nNONRESP, '/', length(test$ID)))
# Reorganise data-frame
# pivot longer the VAS response by each quality of sensation
# do this for both RT and VAS
df_long <- df_res %>%
pivot_longer(cols = c(VASinit, VASburn, VASwarm, VAScold),
names_to = 'quality',
values_to = 'VAS')
df_long2 <- df_res %>%
pivot_longer(cols = c(RTinit, RTburn, RTwarm, RTcold),
names_to = 'quality',
values_to = 'RT')
# remove the VAS & RT from quality column
df_long$quality <- substr(df_long$quality, 4, 7)
df_long2$quality <- substr(df_long2$quality, 3, 6)
# remove columns from both then merge
df_long <- df_long %>%
select(-c(coolTemp, warmTemp, Order, Manipulation.first))
df_long2 <- df_long2 %>%
select(-c(coolTemp, warmTemp, Order, Manipulation.first))
df_long <- merge(df_long, df_long2)
# then remove NaNs
df_long <- df_long %>% filter(!is.na(VAS))
# remove the initial trials - not important for now
init_burn <- filter(df_long, quality == 'init')
all_vas <- filter(df_long, quality != 'init')
# plot distribution of data
ggplot(df_long) +
geom_density(aes(VAS, colour = manipulation)) +
facet_wrap(~quality, scales = "free_y") +
theme_bw()
# summary statistics
# calculate means
vas_meds <- aggregate(VAS ~ quality*manipulation*condition*cold_probe*ID,
median, data = all_vas)
vas_h1 <- aggregate(VAS ~ quality*manipulation*condition*ID, mean, data = vas_meds)
# change name of manipulation
vas_h1$manipulation <- factor(vas_h1$manipulation,
labels = c('Non-TGI', 'TGI'))
# summary means for h1
h1_sum <- summarySEwithin(data = vas_h1, measurevar = 'VAS',
withinvars = c('manipulation', 'quality', 'condition'))
# plot the summary statistics
# first colours
blue <- brewer.pal(8, "Blues")
grey <- brewer.pal(8, "Greys")
purp <- brewer.pal(8, "Purples")
oran <- brewer.pal(8, "Oranges")
gren <- brewer.pal(8, "Greens")
# order conditions
h1_sum$condition <- factor(h1_sum$condition, levels = c('within', 'across'))
h1_sum$quality <- factor(h1_sum$quality, levels = c('cold', 'warm', 'burn'))
# plot
ggplot(h1_sum, aes(colour = quality, group = manipulation, alpha = manipulation)) +
geom_point(aes(condition, VAS), size = 2, position = position_dodge(-.3)) +
geom_errorbar(aes(condition, ymin = VAS-ci, ymax = VAS+ci), width = .1, size = .7,
position = position_dodge(-.3)) +
geom_line(aes(condition, VAS), size = .7, position = position_dodge(-.3)) +
facet_wrap(~quality) +
scale_colour_manual(values = c(blue[5], oran[5], purp[5])) +
scale_alpha_discrete(range = c(0.6, 1)) +
ylim(0,50) +
theme_bw()
# then pivot wider and calculate difference
vas_h1_diff <- vas_h1 %>%
pivot_wider(names_from = condition, values_from = VAS) %>%
mutate(difference = within - across)
# recode quality
vas_h1_diff$quality <- factor(vas_h1_diff$quality,
levels = c('cold', 'warm', 'burn'))
# summary statistics
h1_diff_sum <- summarySEwithin(data = vas_h1_diff, measurevar = 'difference',
withinvars = c('manipulation', 'quality'))
# now plot the difference
ggplot(data = vas_h1_diff, aes(colour = quality)) +
geom_hline(yintercept = 0, colour = 'grey50') +
geom_point(aes(manipulation, difference, group = ID), position = position_dodge(.2),
alpha = .5) +
geom_point(data = h1_diff_sum, aes(manipulation, difference), colour = 'grey15',
fill = 'grey15',
shape = 21, size = 3) +
geom_errorbar(data = h1_diff_sum, aes(manipulation, ymin = difference-ci,
ymax = difference+ci),
width = .1, size = .7, colour = 'grey15') +
facet_wrap(~quality) +
scale_colour_manual(values = c(blue[5], oran[5], purp[5])) +
labs(title = 'Hypothesis 1: Segmental Distance',
y = 'Within - Across VAS Ratings', x = NULL) +
theme_classic() +
theme(legend.position = 'none') -> h1_diff_plot
h1_diff_plot
ggsave(here::here("figures", "E2_H1_difference.png"), plot = h1_diff_plot,
device = NULL, width = 9, height = 5, dpi = 600)
# Change name of manipulation
vas_meds$manipulation <- factor(vas_meds$manipulation, labels = c('Non-TGI', 'TGI'))
h2_sum <- aggregate(VAS~quality*manipulation*cold_probe, mean, data = vas_meds)
# get confidence intervals
h2_conf <- aggregate(VAS~quality*manipulation*cold_probe, CI, data = vas_meds)
h2_conf <- h2_conf %>%
dplyr::rename(ci = VAS)
h2_sum <- merge(h2_sum, h2_conf, by = c('quality','manipulation','cold_probe'))
# organise data for plotting
vas_meds$cold_probe <- factor(vas_meds$cold_probe, levels =
c('proximal', 'distal', 'rostral', 'caudal'))
h2_sum$cold_probe <- factor(h2_sum$cold_probe, labels =
c('proximal', 'distal', 'rostral', 'caudal'))
# recoding cold probe location so can jitter
vas_meds$cold_code <- factor(vas_meds$cold_probe, labels =
c(1,2,3,4))
h2_sum$cold_code <- factor(h2_sum$cold_probe, labels =
c(1,2,3,4))
ggplot(data = h2_sum %>%
filter(quality == 'burn'), aes(group = manipulation, colour = manipulation)) +
geom_point(aes(cold_probe, VAS),
position = position_dodge(.3), size = 5) +
geom_errorbar(aes(x = cold_probe, ymin = ci[,'lower'], ymax = ci[,'upper']),
position = position_dodge(.3), width = .2, linewidth = 1.1) +
geom_line(aes(cold_probe, VAS), position = position_dodge(.3),
linewidth = 1.7) +
labs(y = 'Burn ratings (0 - 100)', x = '') +
scale_colour_manual(values = c(purp[5], purp[8])) +
ylim(0, 40) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 16),
axis.title = element_text(size = 18)) -> h2_means
# save
ggsave(here::here("figures", "E2_H2_means.png"), plot = h2_means,
device = NULL, width = 7, height = 5, dpi = 600)
ggplot(data = h2_sum %>%
filter(quality == 'burn'), aes(group = manipulation, colour = manipulation)) +
geom_point(aes(cold_probe, VAS),
position = position_dodge(.3), size = 5) +
geom_errorbar(aes(x = cold_probe, ymin = ci[,'lower'], ymax = ci[,'upper']),
position = position_dodge(.3), width = .2, linewidth = 1.1) +
geom_line(aes(cold_probe, VAS), position = position_dodge(.3),
linewidth = 1.7) +
labs(y = 'Burn ratings (0 - 100)', x = '') +
scale_colour_manual(values = c(purp[5], purp[8])) +
ylim(10, 50) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 16),
axis.title = element_text(size = 18)) -> h2_means
# save
ggsave(here::here("figures", "E2_H2_means.png"), plot = h2_means,
device = NULL, width = 7, height = 5, dpi = 600)
# Change name of manipulation
vas_meds$manipulation <- factor(vas_meds$manipulation, labels = c('Non-TGI', 'TGI'))
h2_sum <- aggregate(VAS~quality*manipulation*cold_probe, median, data = vas_meds)
# get confidence intervals
h2_conf <- aggregate(VAS~quality*manipulation*cold_probe, IQR, data = vas_meds)
h2_conf <- h2_conf %>%
dplyr::rename(iqr = VAS)
h2_sum <- merge(h2_sum, h2_conf, by = c('quality','manipulation','cold_probe'))
# organise data for plotting
vas_meds$cold_probe <- factor(vas_meds$cold_probe, levels =
c('proximal', 'distal', 'rostral', 'caudal'))
h2_sum$cold_probe <- factor(h2_sum$cold_probe, labels =
c('proximal', 'distal', 'rostral', 'caudal'))
# recoding cold probe location so can jitter
vas_meds$cold_code <- factor(vas_meds$cold_probe, labels =
c(1,2,3,4))
h2_sum$cold_code <- factor(h2_sum$cold_probe, labels =
c(1,2,3,4))
# Change name of manipulation
vas_meds$manipulation <- factor(vas_meds$manipulation, labels = c('Non-TGI', 'TGI'))
h2_sum <- aggregate(VAS~quality*manipulation*cold_probe, median, data = vas_meds)
# get confidence intervals
h2_conf <- aggregate(VAS~quality*manipulation*cold_probe, iqr, data = vas_meds)
# Change name of manipulation
vas_meds$manipulation <- factor(vas_meds$manipulation, labels = c('Non-TGI', 'TGI'))
h2_sum <- aggregate(VAS~quality*manipulation*cold_probe, median, data = vas_meds)
# get confidence intervals
h2_conf <- aggregate(VAS~quality*manipulation*cold_probe, IQR, data = vas_meds)
h2_conf <- h2_conf %>%
dplyr::rename(iqr = VAS)
h2_sum <- merge(h2_sum, h2_conf, by = c('quality','manipulation','cold_probe'))
# organise data for plotting
vas_meds$cold_probe <- factor(vas_meds$cold_probe, levels =
c('proximal', 'distal', 'rostral', 'caudal'))
h2_sum$cold_probe <- factor(h2_sum$cold_probe, labels =
c('proximal', 'distal', 'rostral', 'caudal'))
# recoding cold probe location so can jitter
vas_meds$cold_code <- factor(vas_meds$cold_probe, labels =
c(1,2,3,4))
h2_sum$cold_code <- factor(h2_sum$cold_probe, labels =
c(1,2,3,4))
ggplot(data = h2_sum %>%
filter(quality == 'burn'), aes(group = manipulation, colour = manipulation)) +
geom_point(aes(cold_probe, VAS),
position = position_dodge(.3), size = 5) +
geom_errorbar(aes(x = cold_probe, ymin = VAS-iqr, ymax = VAS+iqr),
position = position_dodge(.3), width = .2, linewidth = 1.1) +
geom_line(aes(cold_probe, VAS), position = position_dodge(.3),
linewidth = 1.7) +
labs(y = 'Burn ratings (0 - 100)', x = '') +
scale_colour_manual(values = c(purp[5], purp[8])) +
ylim(10, 50) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 16),
axis.title = element_text(size = 18)) -> h2_means
# save
ggsave(here::here("figures", "E2_H2_means.png"), plot = h2_means,
device = NULL, width = 7, height = 5, dpi = 600)
ggplot(data = h2_sum %>%
filter(quality == 'burn'), aes(group = manipulation, colour = manipulation)) +
geom_point(aes(cold_probe, VAS),
position = position_dodge(.3), size = 5) +
geom_errorbar(aes(x = cold_probe, ymin = VAS-iqr, ymax = VAS+iqr),
position = position_dodge(.3), width = .2, linewidth = 1.1) +
geom_line(aes(cold_probe, VAS), position = position_dodge(.3),
linewidth = 1.7) +
labs(y = 'Burn ratings (0 - 100)', x = '') +
scale_colour_manual(values = c(purp[5], purp[8])) +
ylim(0, 60) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 16),
axis.title = element_text(size = 18)) -> h2_means
# save
ggsave(here::here("figures", "E2_H2_means.png"), plot = h2_means,
device = NULL, width = 7, height = 5, dpi = 600)
h2_means
ggplot(data = h2_sum %>%
filter(quality == 'burn'), aes(group = manipulation, colour = manipulation)) +
geom_point(aes(cold_probe, VAS),
position = position_dodge(.3), size = 5) +
geom_errorbar(aes(x = cold_probe, ymin = VAS-iqr, ymax = VAS+iqr),
position = position_dodge(.3), width = .2, linewidth = 1.1) +
geom_line(aes(cold_probe, VAS), position = position_dodge(.3),
linewidth = 1.7) +
labs(y = 'Burn ratings (0 - 100)', x = '') +
scale_colour_manual(values = c(purp[5], purp[8])) +
#ylim(, 60) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 16),
axis.title = element_text(size = 18)) -> h2_means
h2_means
# save
ggsave(here::here("figures", "E2_H2_means.png"), plot = h2_means,
device = NULL, width = 7, height = 5, dpi = 600)
ggplot(data = vas_meds %>%
filter(quality == 'burn'), aes(group = manipulation, colour = manipulation)) +
geom_boxplot(aes(cold_probe, VAS))
View(vas_meds)
ggplot(data = vas_meds %>%
filter(quality == 'burn'), aes(group = manipulation, colour = manipulation)) +
geom_boxplot(aes(cold_cond, VAS))
ggplot(data = vas_meds %>%
filter(quality == 'burn'), aes(group = manipulation, colour = manipulation)) +
geom_boxplot(aes(cold_code, VAS))
ggplot(data = vas_meds %>%
filter(quality == 'burn'), aes(cold_code, VAS, group = manipulation, colour = manipulation)) +
geom_boxplot()
ggplot(data = vas_meds %>%
filter(quality == 'burn'), aes(cold_code, VAS, group = cold_probe, colour = manipulation)) +
geom_boxplot()
ggplot(data = vas_meds, aes(group = manipulation, colour = manipulation)) +
geom_box_plot(data = vas_meds %>%
filter(quality == 'burn' & manipulation == 'Non-TGI'),
aes(cold_probe, VAS),
position = position_nudge(-.1), size = 5)
ggplot(data = vas_meds, aes(group = manipulation, colour = manipulation)) +
geom_boxplot(data = vas_meds %>%
filter(quality == 'burn' & manipulation == 'Non-TGI'),
aes(cold_probe, VAS),
position = position_nudge(-.1), size = 5)
ggplot(data = h2_sum, aes(group = manipulation, colour = manipulation)) +
geom_point(aes(cold_probe, VAS),
position = position_dodge(.3), size = 5) +
geom_errorbar(aes(x = cold_probe, ymin = VAS-iqr, ymax = VAS+iqr),
position = position_dodge(.3), width = .2, linewidth = 1.1) +
geom_line(aes(cold_probe, VAS), position = position_dodge(.3),
linewidth = 1.7) +
labs(y = 'Burn ratings (0 - 100)', x = '') +
scale_colour_manual(values = c(purp[5], purp[8])) +
#ylim(, 60) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 16),
axis.title = element_text(size = 18)) -> h2_means
rm(list=ls())
# experiment 1 file
dat_file <- file.path("data", 'STGI_exp1_compiled-data.csv')
# load all data file
if (file.exists(dat_file)){
df_res <- read.csv(dat_file)
} else {
print('Data file does not exist, check data is in current directory.
If not, run tgi-compiler.Rmd')
}
# Calculate median burning rating for all participants
# TGI trials only
# Then flag how many are not sig > 0
df_med <- aggregate(VASburn~ID*manipulation*cold_probe*trial_type, median, data = df_res)
tgi <-  df_med %>%
filter(manipulation == 'TGI')
cnt <-  df_med %>%
filter(manipulation == 'CNT')
# identify test results where pvalue is < .05
tgi$ID <- as.factor(tgi$ID)
i = 0
test = data.frame(matrix(nrow = 40, ncol = 3))
colnames(test) <- c('ID','pval','responder')
for (id in levels(tgi$ID)){
i = i+1
tmp1 <- tgi[tgi$ID == id ,]
test$ID[i] <- id
test$pval[i] <- (t.test(tmp1$VASburn, mu = 0, alternative = 'greater'))$p.value
test$responder[i] <- isTRUE(test$pval[i] < .05)
}
# combine responder logic with main data-frame
test$responder <- ifelse(test$responder == TRUE, 1, 0)
test <- test[, c(1,3)]
df_res <- merge(df_res, test, by = 'ID')
# count the number of false responses
nNONRESP <- sum(test$responder == FALSE)
# print
print(paste0('Non responders: ', nNONRESP, '/', length(test$ID)))
# Reorganise data-frame
# pivot longer the VAS response by each quality of sensation
# do this for both RT and VAS
df_long <- df_res %>%
pivot_longer(cols = c(VASinit, VASburn, VASwarm, VAScold),
names_to = 'quality',
values_to = 'VAS')
df_long2 <- df_res %>%
pivot_longer(cols = c(RTinit, RTburn, RTwarm, RTcold),
names_to = 'quality',
values_to = 'RT')
# remove the VAS & RT from quality column
df_long$quality <- substr(df_long$quality, 4, 7)
df_long2$quality <- substr(df_long2$quality, 3, 6)
# remove columns from both then merge
df_long <- df_long %>%
select(-c(coolTemp, warmTemp, Order, Manipulation.first))
df_long2 <- df_long2 %>%
select(-c(coolTemp, warmTemp, Order, Manipulation.first))
df_long <- merge(df_long, df_long2)
# then remove NaNs
df_long <- df_long %>% filter(!is.na(VAS))
# remove the initial trials - not important for now
init_burn <- filter(df_long, quality == 'init')
all_vas <- filter(df_long, quality != 'init')
# plot distribution of data
ggplot(df_long) +
geom_density(aes(VAS, colour = manipulation)) +
facet_wrap(~quality, scales = "free_y") +
theme_bw()
# summary statistics
# calculate means
vas_meds <- aggregate(VAS ~ quality*manipulation*condition*cold_probe*ID,
median, data = all_vas)
vas_h1 <- aggregate(VAS ~ quality*manipulation*condition*ID, mean, data = vas_meds)
# change name of manipulation
vas_h1$manipulation <- factor(vas_h1$manipulation,
labels = c('Non-TGI', 'TGI'))
# summary means for h1
h1_sum <- summarySEwithin(data = vas_h1, measurevar = 'VAS',
withinvars = c('manipulation', 'quality', 'condition'))
# plot the summary statistics
# first colours
blue <- brewer.pal(8, "Blues")
grey <- brewer.pal(8, "Greys")
purp <- brewer.pal(8, "Purples")
oran <- brewer.pal(8, "Oranges")
gren <- brewer.pal(8, "Greens")
# order conditions
h1_sum$condition <- factor(h1_sum$condition, levels = c('within', 'across'))
h1_sum$quality <- factor(h1_sum$quality, levels = c('cold', 'warm', 'burn'))
# plot
ggplot(h1_sum, aes(colour = quality, group = manipulation, alpha = manipulation)) +
geom_point(aes(condition, VAS), size = 2, position = position_dodge(-.3)) +
geom_errorbar(aes(condition, ymin = VAS-ci, ymax = VAS+ci), width = .1, size = .7,
position = position_dodge(-.3)) +
geom_line(aes(condition, VAS), size = .7, position = position_dodge(-.3)) +
facet_wrap(~quality) +
scale_colour_manual(values = c(blue[5], oran[5], purp[5])) +
scale_alpha_discrete(range = c(0.6, 1)) +
ylim(0,50) +
theme_bw()
# then pivot wider and calculate difference
vas_h1_diff <- vas_h1 %>%
pivot_wider(names_from = condition, values_from = VAS) %>%
mutate(difference = within - across)
# recode quality
vas_h1_diff$quality <- factor(vas_h1_diff$quality,
levels = c('cold', 'warm', 'burn'))
# summary statistics
h1_diff_sum <- summarySEwithin(data = vas_h1_diff, measurevar = 'difference',
withinvars = c('manipulation', 'quality'))
# now plot the difference
ggplot(data = vas_h1_diff, aes(colour = quality)) +
geom_hline(yintercept = 0, colour = 'grey50') +
geom_point(aes(manipulation, difference, group = ID), position = position_dodge(.2),
alpha = .5) +
geom_point(data = h1_diff_sum, aes(manipulation, difference), colour = 'grey15',
fill = 'grey15',
shape = 21, size = 3) +
geom_errorbar(data = h1_diff_sum, aes(manipulation, ymin = difference-ci,
ymax = difference+ci),
width = .1, size = .7, colour = 'grey15') +
facet_wrap(~quality) +
scale_colour_manual(values = c(blue[5], oran[5], purp[5])) +
labs(title = 'Hypothesis 1: Segmental Distance',
y = 'Within - Across VAS Ratings', x = NULL) +
theme_classic() +
theme(legend.position = 'none') -> h1_diff_plot
h1_diff_plot
ggsave(here::here("figures", "E1_H1_difference.png"), plot = h1_diff_plot,
device = NULL, width = 9, height = 5, dpi = 600)
# Change name of manipulation
vas_meds$manipulation <- factor(vas_meds$manipulation, labels = c('Non-TGI', 'TGI'))
h2_sum <- aggregate(VAS~quality*manipulation*cold_probe, median, data = vas_meds)
# get confidence intervals
h2_conf <- aggregate(VAS~quality*manipulation*cold_probe, IQR, data = vas_meds)
h2_conf <- h2_conf %>%
dplyr::rename(iqr = VAS)
h2_sum <- merge(h2_sum, h2_conf, by = c('quality','manipulation','cold_probe'))
# organise data for plotting
vas_meds$cold_probe <- factor(vas_meds$cold_probe, levels =
c('proximal', 'distal', 'rostral', 'caudal'))
h2_sum$cold_probe <- factor(h2_sum$cold_probe, labels =
c('proximal', 'distal', 'rostral', 'caudal'))
# recoding cold probe location so can jitter
vas_meds$cold_code <- factor(vas_meds$cold_probe, labels =
c(1,2,3,4))
h2_sum$cold_code <- factor(h2_sum$cold_probe, labels =
c(1,2,3,4))
ggplot(data = h2_sum %>%
filter(quality == 'burn'), aes(group = manipulation, colour = manipulation)) +
geom_point(aes(cold_probe, VAS),
position = position_dodge(.3), size = 5) +
geom_errorbar(aes(x = cold_probe, ymin = VAS-iqr, ymax = VAS+iqr),
position = position_dodge(.3), width = .2, linewidth = 1.1) +
geom_line(aes(cold_probe, VAS), position = position_dodge(.3),
linewidth = 1.7) +
labs(y = 'Burn ratings (0 - 100)', x = '') +
scale_colour_manual(values = c(purp[5], purp[8])) +
ylim(0, 40) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 16),
axis.title = element_text(size = 18)) -> h2_means
# save
ggsave(here::here("figures", "E1_H2_means.png"), plot = h2_means,
device = NULL, width = 7, height = 5, dpi = 600)
ggplot(data = h2_sum %>%
filter(quality == 'burn'), aes(group = manipulation, colour = manipulation)) +
geom_point(aes(cold_probe, VAS),
position = position_dodge(.3), size = 5) +
geom_errorbar(aes(x = cold_probe, ymin = VAS-iqr, ymax = VAS+iqr),
position = position_dodge(.3), width = .2, linewidth = 1.1) +
geom_line(aes(cold_probe, VAS), position = position_dodge(.3),
linewidth = 1.7) +
labs(y = 'Burn ratings (0 - 100)', x = '') +
scale_colour_manual(values = c(purp[5], purp[8])) +
#ylim(0, 40) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text(size = 16),
axis.title = element_text(size = 18)) -> h2_means
# save
ggsave(here::here("figures", "E1_H2_means.png"), plot = h2_means,
device = NULL, width = 7, height = 5, dpi = 600)
